{
    "PaymentController": {
        "filename": "payment",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "ReceivePayment": {
                "purpose": "Process payments by taking the id of a token, verifying it is a valid token, then processing a payment of amount amt.",
                "params": {
                    "tokenId" : {
                        "type": "string",
                        "comment": "The stripe token"
                    },
                    "amt" : {
                        "type": "number",
                        "comment": "The amount of the payment"
                    },
                    "description" : {
                        "type": "string",
                        "comment": "The reason or description for/of the payment"
                    },
                    "save": {
                        "type": "boolean",
                        "default": false,
                        "comment": "Whether or not the card details should be saved through Stripe for future re-use."
                    }
                },
                "tests": [
                    "Errors on invalid id",
                    "Adds transaction to database",
                    "Charges correct amount",
                    "Creates charge with Stripe"
                ]
            },
            "ValidateToken": {
                "purpose": "Easier validation of tokens to make testing easier.",
                "params": {
                    "tokenId" : {
                        "type": "number",
                        "comment": "The stripe token id"
                    }
                },
                "tests": [
                    "Rejects bad form before sending to server (local)",
                    "Rejects good form, invalid tokens (async)",
                    "Approves valid tokens"
                ]
            },
            "Refund": {
                "purpose": "Refund a payment to a customer",
                "params": {
                    "transaction" : {
                        "type": "any",
                        "comment": "A charge object"
                    },
                    "amount" : {
                        "type": "number",
                        "comment": "Amount to refund. -1 means full amount",
                        "default": "-1"
                    }
                },
                "tests": [
                    "Refunds correct amount",
                    "Ignores bad form for transaction id (local)",
                    "Breaks on non-existent transaction id"
                ]
            },
            "Adjust": {
                "purpose": "Adjust a previously made payment (refund, and makepayment, or just a refund if is less)",
                "params": {
                    "transaction" : {
                    "type": "any",
                    "comment": "Positive or negative decimal"
                    },
                    "amount" : {
                    "type": "number",
                    "comment": "Positive or negative decimal"
                    }
                },
                "tests": [
                    "refunds correct partial amount",
                    "re-charges correct amount",
                    "refunds full amount on new charge higher"
                ]                
            },
            "CheckForEvents": {
                "purpose": "Check for new events from Stripe",
                "params": {

                },
                "tests": [
                    "Returns events when there are unread events",
                    "Returns nothing when there are no events to be read"
                ]
            },
            "GetBalance": {
                "purpose": "Returns the balance that stripe owes us thus far",
                "params" :{
                    
                },
                "tests": [
                    "Retrieves proper balance"
                ]
            }
        },
        "dependencies": {
            "* as _": "lodash",
            "* as StripeNode": "stripe",
            "* as Data": "../data"
        }
    },
    "PaymentRouter": {
        "filename": "payment",
        "folder": "routers",
        "type": "router",
        "post": {
            "/receive": "Receive a payment",
            "/validatetoken": "Validates a token",
            "/refund": "Refunds a payment",
            "/adjust": "Adjusts a payment",
            "/events": "Checks for new events",
            "/balance": "Gets the balance of what stripe owes us"
        },
        "dependencies": {
            "* as PaymentController": "../controllers/payment"
        }
    },
    "UserController": {
        "filename": "user",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "RegisterUserAccount": {
              "purpose": "Register a new user for the system",
              "params": {
                  "email" : {
                      "type": "string",
                      "comment": "The email account to contact the user at"
                  },
                  "username" : {
                     "type": "string",
                     "comment": "The username that they will be signing up with"
                  },
                  "password" : {
                     "type": "string",
                     "comment": "The password they will be using"
                  }
              },
              "tests": [
                  "Creates a new user",
                  "Hashes the password",
                  "Sends iterations and password to hasher",
                  "Sets the user account as inactive",
                  "Sends email with activation token link",
                  "Refuses bad form password"
              ]
            },
            "FinishUserRegistration": {
                "purpose": "Verifies a token for registration, and sets a user to active",
                "params": {
                    "user" : {
                        "type": "number|string",
                        "comment": "The user id or user name that is to be registered"
                    },
                    "token" : {
                        "type": "string",
                        "comment": "The token string for the user registration"
                    }
                },
                "tests": [
                    "Activates user account"
                ]
            },
            "ValidateActivationToken": {
              "purpose": "Validation of the activation token",
              "params": {
                  "userid" : {
                     "type": "number",
                     "comment": "The user id that is to be verified with a token"
                  },
                  "token" : {
                     "type": "string",
                     "comment": "The token to be verified"
                  }
              },
              "tests": [
                  "Validates correctly",
                  "Rejects invalid parameters",
                  "Rejects incorrect token"
              ]
            },
            "ActivateUser": {
                "purpose": "Activates a user that has been deactivated",
                "params": {
                    "userId" : {
                        "type": "number",
                        "comment": "The user Id that is to be activated"
                    }
                },
                "tests": [
                    "Properly activates a user",
                    "Refuses a non-existent user id",
                    "Ignores users that are already active",
                    "Refuses users that never finished registration"
                ]
            },
            "DeactivateUser": {
                "purpose": "Deactivates a user that is currently active",
                "params": {
                    "userId" : {
                        "type": "number",
                        "comment": "The user Id to be deactivated"
                    }
                },
                "tests": [
                    "Deactivates user",
                    "Ignores users that are already inactive",
                    "Refuses a non-existent user id"
                ]
            },
            "GetUserStatus": {
                "purpose": "Retrieves whether or not a user is active",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object to get the status of"
                    },
                },
                "tests": [
                    "gets proper status",
                    "ignores non-existent users"
                ]
            },
            "CreateUser": {
                "purpose": "Creates a new user. Utility function for user registration. Returns id",
                "params": {
                    "email" : {
                        "type": "string",
                        "comment": "The email the user registered with"
                    },
                    "userName" : {
                        "type": "string",
                        "comment": "The username to be used for logins. No spaces permitted."
                    },
                    "password" : {
                        "type": "string",
                        "comment": "Password in plaintext form, pre-hash."
                    }
                },
                "tests": [
                    "Refuses bad-form username",
                    "Refuses passwords smaller than 8 characters", 
                    "Uses hash algorithm"
                ]
            },
            "ResetPassword": {
                "purpose": "Uses a token to reset the user's password",
                "params": {
                    "newPassword" : {
                        "type": "string",
                        "comment": "The new password"
                    },
                    "resetToken" : {
                        "type": "string",
                        "comment": "The token to be used for resetting the user's password"
                    }
                },
                "tests": [
                    "Password is reset"
                ]
            },
            "GeneratePassword": {
                "purpose": "Dependency injection capable hasher",
                "params": {
                    "password" : {
                        "type": "string",
                        "comment": "The password to be used by the algo"
                    },
                    "algo" : {
                        "type": "(password: string|Buffer, salt: string|Buffer, iterations: number, keylen: number, digest: string, callback: (err: Error, derivedKey: Buffer) => any) => any",
                        "comment": "The hashing algorithm to be used"
                    }
                },
                "tests": [
                    "Generates a hex password hash"
                ]
            },
            "CacheUsers": {
                "purpose": "Caches all of the users locally so lookups in the database are not so arduous. To be done ONCE on application startup.",
                "params": {
                    
                },
                "tests": [
                    "Gets all users",
                    "Gets all password hashes",
                    "Categorizes users into Employees and Customers (if !employee then customer)"
                ]
            },
            "AddUserToCache": {
                "purpose": "Adds a new user to the cache",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or the User object to store"
                    }
                },
                "tests": [
                    "Refuses a non-existent user id",
                    "Caches user"
                ]
            },
            "RemoveUserFromCache": {
                "purpose": "Removes a deactivated user from the cache",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user to remove from the cache"
                    }
                },
                "tests": [
                    "Removes user from cache"
                ]
            },
            "GetCachedUser": {
                "purpose": "Gets a cached user",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The user or id of the user to get"
                    }
                },
                "tests": [
                    "Retrieves users that do exist"
                ]
            },
            "UpdateCachedUser": {
                "purpose": "Updates a user that was already cached.",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user to be updated from the database"
                    }
                },
                "tests": [
                    "Updates from database",
                    "Errors if user does not exist in database"
                ]
            },
            "GenerateActivationToken": {
                "purpose": "Generates a new activation token",
                "params": {
                    "email" : {
                        "type": "string",
                        "comment": "The email to validate"
                    }
                },
                "tests": [
                    
                ]
            },
            "SendActivationEmail": {
                "purpose": "Sends email for user to activate their account",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object needing activation"
                    }
                },
                "tests": [
                    "Refuses already activated user",
                    "Refuses non-existent user",
                    "Sends email"
                ]
            },
        },
        "dependencies": {
            "* as crypto": "crypto",
            "{default as User}": "../data/user_account",
            "* as Data": "../data",
            "* as Validator": "validator",
            "* as Errors": "../errors/controllers/user"
        }
    },
    "UserRouter": {
        "filename": "user",
        "folder": "routers",
        "type": "router",
        "post": {
            "/register": "Register for a new user account",
            "/register/finish": "Finish a registration",
            "/user/deactivate": "Deactivates a user",
            "/user/activate": "Activates an inactive user",
            "/user/reset": "Resets a user password"
        }
    },
    "PermissionController": {
        "filename": "permission",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "CreatePermission": {
                "purpose": "Creates a permission for usage by a controller",
                "params": {
                    "name" : {
                        "type": "string",
                        "comment": "A max 32 characters length permission name"
                    }
                },
                "tests": [
                    "Creates the permission for usage",
                    "Refuses if the permission already exists",
                    "Returns created permission"
                ]
            },
            "GrantPermission": {
                "purpose": "Give a user a permission, checking first if the user giving the permission is allowed.",
                "params": {
                    "userId" : {
                        "type": "number|User",
                        "comment": "The userId or User object to have the permission set on"
                    },
                    "permissionId" : {
                        "type": "number|Permission",
                        "comment": "The id, or object, of the permission to be set on the user"
                    },
                    "giverId" : {
                        "type": "number|User",
                        "comment": "The userId or User object providing the permission"
                    }
                },
                "tests": [
                    "Refuses if giver does not have permission to provide permission",
                    "Undefined if giver does not exist",
                    "Undefined if user does not exist",
                    "Undefined if permission does not exist",
                    "Sets permission properly"
                ]
            },
            "RevokePermission": {
                "purpose": "Revokes a permisison off of a user, checking first if the revoker is allowed to revoke permission",
                "params": {
                    "revokeee" : {
                        "type": "number|User",
                        "comment": "The id or user object to have the permission revoked from"
                    },
                    "permission" : {
                        "type": "number|Permission",
                        "comment": "The id or object of the permission to be provided"
                    },
                    "revoker" : {
                        "type": "number|User",
                        "comment": "The id or the object of the user revoking the permission"
                    }
                },
                "tests": [
                    "Refuses if giver does not have permission to revoke permission",
                    "Undefined if revoker does not exist",
                    "Undefined if revokeee does not exist",
                    "Undefined if permission does not exist",
                    "Properly revokes permission",
                    "Updates permission cache"
                ]
            },
            "HasPermission": {
                "purpose": "Checks if the user has a permission",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "User id or the user object to be checked"
                    },
                    "permission" : {
                        "type": "number|Permission",
                        "comment": "The permission to be checked"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Undefined if permission does not exist",
                    "Returns proper true/false",
                    "Updates permission cache"
                ]
            },
            "CachePermissionSet": {
                "purpose": "To cache a user's permission set. Used to increase permission checking performance.",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The user or id of the user to have their permissions cached"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Caches all permissions"
                ]
            },
            "DeleteFromCache": {
                "purpose": "Deletes a user's permissions from cache after a period of time",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object to remove the permissions from"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Deletes permissions"
                ]
            }
        },
        "dependencies": {
            "{default as User}": "../data/user_account",
            "{default as Permission}": "../data/user_permission",
            "{default as PermissionSet}": "../data/user_permission_set",
            "* as Data": "../data"
        }
    },
    "CommunicationController": {
        "filename": "communication",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "SendMessage": {
                "purpose": "To send a message to another user. Note: Receipts in conversation should be created too.",
                "params": {
                    "sender" : {
                        "type": "number|User",
                        "comment": "The person that is sending the message"
                    },
                    "conversation" : {
                        "type": "number|Conversation",
                        "comment": "the id or conversation object to send the message to"
                    },
                    "msg" : {
                        "type": "string",
                        "comment": "The message the user has sent"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Undefined if conversation does not exist",
                    "Refuses if message is too long",
                    "Refuses if user is not part of the conversation",
                    "Refuses if the message is empty",
                    "Makes necessary notifications",
                    "Sends the message"
                ]
            },
            "CreateReceiptsForMessage": {
                "purpose": "Creates the receipts in a conversation for the messages",
                "params": {
                    "message" : {
                        "type": "number|Message",
                        "comment": "The id or the message object to create receipts for"
                    },
                    "conversation" : {
                        "type": "number|Conversation",
                        "comment": "The id or the Conversation object to create receipts for"
                    }
                },
                "tests": [
                    "Refuses if id is not set", 
                    "Undefined if conversation does not exist",
                    "Creates receipts for all users in conversation"
                ]
            },
            "GetConversation": {
                "purpose": "Retrieves a single conversation",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The user requesting the conversation"
                    },
                    "conversation" : {
                        "type": "number|Conversation",
                        "comment": "The object to retrieve the conversation (just use sync)"
                    }
                },
                "tests": [
                    "Undefined if conversation does not exist",
                    "Refuses if user is not part of the conversation",
                    "Retrieves conversation",
                    "Retrieves a page of messages (50) bolted onto the conversation",
                    "Final 4 messages have receipts"                    
                ]
            },
            "ListConversations": {
                "purpose": "Gets a list of conversations related to the user",
                "params": {
                    "userId" : {
                        "type": "number|User",
                        "comment": "The user to get a list of conversations for"
                    },
                    "amt" : {
                        "type": "number",
                        "comment": "The quantity of conversations to get (max 20)",
                        "default": 20
                    }
                },
                "tests": [
                    "Gets list of conversations",
                    "Gets only conversations for the user",
                    "Retrieves a page of messages (50) bolted onto each conversation",
                    "Undefined if user does not exist",
                    "Returns quantity of conversations or less",
                    "Final 4 messages have receipts"                    
                ]
            },
            "PageConversations": {
                "purpose": "Gets a page of conversations related to the user",
                "params": {
                    "userId" : {
                        "type": "number|User",
                        "comment": "The user to get a page of conversations for"
                    },
                    "amt" : {
                        "type": "number",
                        "comment": "The amount of conversations to get"
                    },
                    "page" : {
                        "type": "number",
                        "comment": "The page number",
                        "default": 1
                    }
                },
                "tests": [
                    "Gets list of conversations",
                    "Gets only conversations for the user",
                    "Retrieves a page of messages (50) bolted onto each conversation",
                    "Undefined if user does not exist",
                    "Returns quantity of conversations or less",
                    "Final 4 messages have receipts"
                ]
            },
            "ListMessages": {
                "purpose": "Gets just the messages for a single conversation",
                "params": {
                    "conversation" : {
                        "type": "number|Conversation",
                        "comment": "The id or Conversation"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User to get the messages in a conversation for"
                    }
                },
                "tests": [
                    "Gets list of messages",
                    "Gets only the messages for the user",
                    "Gets only the messages in the conversation",
                    "Sets messages as received for user",
                    "Final 4 messages have receipts",
                    "Refuses if the user is not part of the conversation the message is in"
                ]
            },
            "PageMessages": {
                "purpose": "Gets a page of messages for a single conversation",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user to get a page of messages for"
                    },
                    "amt" : {
                        "type": "number",
                        "comment": "The number of messages to get in the conversation"
                    },
                    "page" : {
                        "type": "number",
                        "comment": "The page number",
                        "default": 1
                    }
                },
                "tests": [
                    "Gets a page of messages",
                    "Correct amount of messages (less than or equal)",
                    "Correct offset of messages (final page, or correct page)",
                    "Refuses if the user is not part of the conversation the message is in",
                    "Final 4 messages have receipts",
                    "Sets messages as received for user"     
                ]
            },
            "GetReceipts": {
                "purpose": "Gets receipts for a message",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The user to get the receipts for"
                    },
                    "message" : {
                        "type": "number|Message",
                        "comment": "The message to get the receipt(s) for"
                    }
                },
                "tests": [
                    "Gets receipts for only the message",
                    "Gets receipt for only the user",
                    "Refuses if the user is not part of the conversation the message is in",
                    "Returns receipts for message"
                ]
            },
            "AddParticipant": {
                "purpose": "Adds a participant to a conversation",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The user being added"
                    },
                    "conversation" : {
                        "type": "number|Conversation",
                        "comment": "The conversation to be added to"
                    },
                    "adder" : {
                        "type": "number|User",
                        "comment": "The person adding the other to the conversation"
                    }
                },
                "tests": [
                    "Undefined users that do not exist",
                    "Refuses if adder is not part of the conversation",
                    "Ignores if the user is already part of the conversation",
                    "Adds user to the conversation"
                ]
            },
            "SetMessageReceived": {
                "purpose": "Sets a single message as read",
                "params": {
                    "message" : {
                        "type": "number|Message",
                        "comment": "The message to be set as read"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user that read it"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Undefined if message does not exist",
                    "Refuses if the user is not part of the conversation the message is in",
                    "Sets the message as read"
                ]
            },
            "GetParticipants": {
                "purpose": "Retrieves the participants in the conversation. Returns ConversationParticipant[]",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user to get the conversation for."
                    },
                    "conversation" : {
                        "type": "number|Conversation",
                        "comment": "The conversation to get the participants for"
                    }
                },
                "tests": [
                    "Undefined if the conversation or user does not exist",
                    "Reject if user is not in the conversation",
                    "Returns every other participant than user",
                    "Returns array of ConversationParticipants"
                ]
            },
            "SetAllMessagesRead": {
                "purpose": "Sets all of the messages in the conversation as being read",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object to have 'read' the messages"
                    },
                    "conversation" : {
                        "type": "number|Conversation",
                        "comment": "the id or conversation to have the messages set to read"
                    }
                },
                "tests": [
                    "Undefined if conversation does not exist",
                    "Undefined if user does not exist",
                    "Sets all messages read in conversation"
                ]
            },
            "GetUnreadConversations": {
                "purpose": "Gets a page of unread conversations",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object to get the read messages for"
                    },
                    "amt" : {
                        "type": "number",
                        "comment": "The amount of unread conversations (with messages) to get",
                        "default": 25
                    },
                    "page" : {
                        "type": "number",
                        "comment": "The page number of conversations to get (rare to use)",
                        "default": 0
                    }
                },
                "tests": [
                    "Correct offset",
                    "Only gets messages for this user",
                    "Gets correct amount (retrieved <= amt)",
                    "ignores non-existent users",
                    "Gets only conversations for the user"
                ]
            }
        },
        "dependencies": {
            "{default as User}": "../data/user_account",
            "Conversation": "../data/conversation",
            "ConversationParticipant": "../data/conversation_participant",
            "Message": "../data/message",
            "MessageReceipt": "../data/message_receipt",
            "* as Data": "../data"
        }
    },
    "CommunicationRouter": {
        "filename": "communication",
        "folder": "routers",
        "type": "router",
        "post": {
            "/message": "Gets a single message",
            "/message/send": "Sends a new message",
            "/message/list": "Gets a list of messages for a conversation",
            "/message/page": "Gets a page of messages for a conversation",
            "/message/read": "Sets a message to read",
            "/message/receipts": "Gets the receipts for a message",
            "/message/unread": "Sets a message to unread",
            "/conversation": "Gets a single conversation",
            "/conversation/list": "Gets a list of conversations",
            "/conversation/page": "Gets a page of conversations",
            "/conversation/participants": "Gets the participants in a conversation",
            "/conversation/participant/add": "Adds a participant to a conversation",
            "/conversation/unread": "Gets the unread conversations for a user"
        }
    },
    "NotificationController": {
        "filename": "notification",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "GetNotifications": {
                "purpose": "Gets the notifications for the user",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user to get the notifications for"
                    }
                },
                "tests": [
                    "Gets notifications for user",
                    "Ignores nonexistent users",
                    "Gets notifications only for the user specified"
                ]
            },
            "CreateNotification": {
                "purpose": "Creates a notification for a user (if it can not be derived)",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or the user object to create the notification for"
                    },
                    "origin" : {
                        "type": "string",
                        "comment": "The origin of the notification"
                    },
                    "message" : {
                        "type": "string",
                        "comment": "The message to give to the user"
                    }
                },
                "tests": [
                    "Creates notification",
                    "Undefined if user does not exist",
                    "Refuses if origin or message is null or empty",
                    "Caches notification"
                ]
            },
            "RemoveNotification": {
                "purpose": "Removes a notification that has been viewed",
                "params": {
                    "notification" : {
                        "type": "number|Notification",
                        "comment": "The notification to remove"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object requesting the removal"
                    }
                },
                "tests": [
                    "Removes notification",
                    "Refuses if the notification does not belong to the user",
                    "Undefined if the user does not exist",
                    "Undefined if the notification does not exist"
                ]
            },
            "CacheNotifications": {
                "purpose": "Caches all notifications for performance sake by pulling all of them from the database, and finding the notifications that need to exist.",
                "params": {
                    
                },
                "tests": [
                    "Caches notifications"
                ]
            },
            "SetRead": {
                "purpose": "Sets a notification as read. Alias for SetNotificationStatus(status = false)",
                "params": {
                    "notification" : {
                        "type": "Notification|Notification[]",
                        "comment": "The notification(s) to set as read"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object setting the notification to read"
                    }
                },
                "tests": [
                    "Rejects if the notification does not belong to the user",
                    "Undefined if the notification does not exist"
                ]
            },
            "SetUnread": {
                "purpose": "Sets a message as unread. Alias for SetNotificationStatus(status = false)",
                "params": {
                    "notification" : {
                        "type": "Notification",
                        "comment": "The notifications to set as unread"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object setting the notification to unread"
                    }
                },
                "tests": [
                    "Rejects if the notification does not belong to the user",
                    "Undefined if the user does not exist",
                    "Undefined if the notification does not exist"
                ]
            },
            "SetNotificationStatus": {
                "purpose": "Sets notification(s) read status (true=read)",
                "params": {
                    "notification" : {
                        "type": "Notification",
                        "comment": "The notification or array of notifications to set to status"
                    },
                    "status" : {
                        "type": "boolean",
                        "comment": "The status to set the isread to"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user setting the status"
                    }
                },
                "tests": [
                    "Rejects if the notification does not belong to the user",
                    "Undefined if notification does not exist",
                    "Undefined if the user does not exist"
                ]
            }
        },
        "dependencies": {
            "{default as User}": "../data/user_account",
            "Notification": "../data/notification"
        }
    },
    "NotificationRouter": {
        "filename": "notification",
        "folder": "routers",
        "type": "router",
        "post": {
            "/": "Gets all notifications for a user",
            "/unread": "Sets a notification to unread",
            "/read": "Sets a notification to read"
        }
    },
    "AuthorizationController": {
        "filename": "authorization",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "Authorize": {
                "purpose": "Authorizes a user's login. Uses a persistent token with a transient to verify a user's login. Persistent never changes, and is erased to log out, and the transient is to ensure a session is still valid.",
                "params": {
                    "persistentToken" : {
                        "type": "string",
                        "comment": "The token to be verified"
                    },
                    "transientToken" : {
                        "type": "string",
                        "comment": "The transient token to be verified"
                    }
                },
                "tests": [
                    "Generates a new hex transient token on validation",
                    "Authorizes both the persistent and transient tokens",
                    "Rejects request entirely when the transient token does not exist"
                ]
            },
            "Login": {
                "purpose": "Logs a user in by hashing the password and validating a CSRF token",
                "params": {
                    "username" : {
                        "type": "string",
                        "comment": "The user name to log in (escape the HTML chars here)"
                    },
                    "password" : {
                        "type": "string",
                        "comment": "The password to hash and compare"
                    },
                    "token" : {
                        "type": "string",
                        "comment": "The token to prevent cross site request forgery"
                    }
                },
                "tests": [
                    "Refuses missing CSRF token",
                    "Refuses request when the CSRF is invalid",
                    "Rejects missing username or password",
                    "Rejects usernames with invalid characters",
                    "Tosses the persistent and transient session tokens into the response object when successful"
                ]
            },
            "Logout": {
                "purpose": "Logs a user out by removing the session on the server side. It is the client's responsibility to clean up themselves.",
                "params": {
                    "persistentToken" : {
                        "type": "string",
                        "comment": "The token that was being used to verify the user"
                    },
                    "transientToken" : {
                        "type": "string",
                        "comment": "The transient token last sent to the user"
                    }
                },
                "tests": [
                    "Removes transient token from cache",
                    "Removes persistent token from cache",
                    "Rejects if the persistent and transient tokens do not exist"
                ]
            },
            "GenerateToken": {
                "purpose": "Generates a token",
                "params": {
                    
                },
                "tests": [
                    "Generates a random 128 character token (run 100,000 times, and check if there are any repeats)"
                ]
            },
            "CachePersistentToken": {
                "purpose": "Caches a persistent token",
                "params": {
                    "token" : {
                        "type": "string",
                        "comment": "The persistent token to be cached"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object the persistent token belongs to"
                    }
                },
                "tests": [
                    "Ignores invalid users",
                    "Saves token"
                ]
            },
            "CacheTransientToken": {
                "purpose": "Caches a transient token",
                "params": {
                    "token" : {
                        "type": "string",
                        "comment": "The transient token to be cached"
                    },
                    "persistentToken" : {
                        "type": "string",
                        "comment": "The persistent token this transient token belongs to"
                    }
                },
                "tests": [
                    "Undefined if the persistent token does not exist",
                    "Caches the transient token"
                ]
            },
            "CacheCSRFToken": {
                "purpose": "Caches a CSRF token for logins",
                "params": {
                    "token" : {
                        "type": "string",
                        "comment": "The token to be cached"
                    },
                    "ip" : {
                        "type": "string",
                        "comment": "The IP address that requested the CSRF token"
                    }
                },
                "tests": [
                    "Caches the token"
                ]
            },
            "ValidateAuthTokens": {
                "purpose": "Validates a transient and persistent token together",
                "params": {
                    "transient" : {
                        "type": "string",
                        "comment": "The transient token to be validated"
                    },
                    "persistent" : {
                        "type": "string",
                        "comment": "The persisten token to be validated"
                    }
                },
                "tests": [
                    "Rejects if the transient does not match the persistent",
                    "Rejects if any parameters are missing"
                ]
            },
            "ValidateCSRFToken": {
                "purpose": "Validates a CSRF token for logins",
                "params": {
                    "token" : {
                        "type": "string",
                        "comment": "The token string to be validated"
                    },
                    "ip" : {
                        "type": "string",
                        "comment": "The ip that is requesting the validation"
                    }
                },
                "tests": [
                    "Rejects if the IP does not match",
                    "Rejects if the token does not match",
                    "Resolves to true if it worked"
                ]
            }
        },
        "dependencies": {
            "* as crypto": "crypto",
            "{default as User}": "../data/user_account"
        }
    },
    "AuthorizationRouter": {
        "filename": "authorization",
        "folder": "routers",
        "type": "router",
        "post": {
            "/login": "Log in a user",
            "/logout": "Log a user out",
            "/token": "Get a login token"
        }
    },
    "TaskboardController": {
        "filename": "taskboard",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "CreateTaskboard": {
                "purpose": "Creates a taskboard for an employee",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object the taskboard belongs to"
                    },
                    "name" : {
                        "type": "string",
                        "comment": "The name of the taskboard"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if the user is not an employee",
                    "Creates the taskboard"
                ]
            },
            "DeleteTaskboard": {
                "purpose": "Deletes a taskboard for an employee",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object doing the deleting"
                    },
                    "taskboard" : {
                        "type": "number|Taskboard",
                        "comment": "The id or taskboard object to be deleted"
                    }
                },
                "tests": [
                    "Refuses if user does not own taskboard",
                    "Deletes taskboard",
                    "Removes all participants"
                ]
            },
            "GetTaskboard": {
                "purpose": "Gets a complete taskboard, with populated tasks and tasklists. Data will have to be sorted and organized.",
                "params": {
                    "taskboard" : {
                        "type": "number|Taskboard",
                        "comment": "The taskboard to pull the tasks from"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user pulling the taskboard"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if the user does not have permission to view tasks",
                    "Undefined if the taskboard does not exist",
                    "Organizes the retrieved data",
                    "Returns a populated taskboard"
                ]
            },
            "AddTasklist": {
                "purpose": "Adds a tasklist to a task board",
                "params": {
                    "name" : {
                        "type": "string",
                        "comment": "The name of the tasklist"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user to add the tasklist to"
                    },
                    "taskboard" : {
                        "type": "number|Taskboard",
                        "comment": "the id or taskboard to add the tasklist to"
                    }
                },
                "tests": [
                    "Refuses if the user is not part of the board",
                    "Refuses if the name is too long",
                    "Undefined if user does not exist",
                    "Creates the tasklist",
                    "Creates the tasklist in the taskboard"
                ]
            },
            "DeleteTasklist": {
                "purpose": "Removes a tasklist from a task board",
                "params": {
                    "tasklist" : {
                        "type": "number|Tasklist",
                        "comment": "The id or Tasklist object to be removed"
                    },
                    "user" : {
                        "type": "number|Tasklist",
                        "comment": "The user removing the tasklist"
                    }
                },
                "tests": [
                    "Refuses if user does not have permission to remove the list",
                    "Refuses if the user is not part of the board",
                    "Undefined if the tasklist does not exist",
                    "Undefined if user does not exist",
                    "Removes the tasklist"
                ]
            },
            "MoveTaskList": {
                "purpose": "Moves tasklist to another board",
                "params": {
                    "tasklist" : {
                        "type": "number|Tasklist",
                        "comment": "The tasklist to be moved"
                    },
                    "board" : {
                        "type": "number|Taskboard",
                        "comment": "The taskboard to move the tasklist to"
                    }
                },
                "tests": [
                    "Refuses if the user does not have write permissions in either board",
                    "Refuses if the user does not have read permissions from the original board",
                    "Undefined if user does not exist",
                    "Undefined if the new board does not exist",
                    "Moves the tasklist"
                ]
            },
            "ChangeTasklistName": {
                "purpose": "Changes a tasklist's name",
                "params": {
                    "newname" : {
                        "type": "string",
                        "comment": "The new name for the tasklist"
                    },
                    "tasklist" : {
                        "type": "number|Tasklist",
                        "comment": "The id or tasklist object to rename"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object doing the renaming"
                    }
                },
                "tests": [
                    "Undefined if the tasklist does not exist",
                    "Undefined if user does not exist",
                    "Refuses if the name is already the new name",
                    "Updates the name"
                ]
            },
            "GetPopulatedTasklist": {
                "purpose": "Gets a task list with all the tasks",
                "params": {
                    "tasklist" : {
                        "type": "number|Tasklist",
                        "comment": "The tasklist to get. Id can not be unset."
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user requesting the tasklist"
                    }
                },
                "tests": [
                    "Undefined if the tasklist does not exist",
                    "Undefined if user does not exist",
                    "Refuses if the user is not allowed to see the tasklist",
                    "Gets a tasklist with a .tasks populated"
                ]
            },
            "CreateTask": {
                "purpose": "Creates a task inside of a tasklist",
                "params": {
                    "message" : {
                        "type": "string",
                        "comment": "The task to be completed"
                    },
                    "tasklist" : {
                        "type": "number|Tasklist",
                        "comment": "The id or tasklist object to add the task to"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object adding the task"
                    },
                    "completed" : {
                        "type": "boolean",
                        "comment": "Whether or not it should be set to completed",
                        "default": false
                    }
                },
                "tests": [
                    "Refuses if the user does not have permission to add the task",
                    "Undefined if user does not exist",
                    "Undefined if the tasklist does not exist",
                    "Creates the task"
                ]
            },
            "SetTaskStatus": {
                "purpose": "Sets a single task as status, or all of its children to status",
                "params": {
                    "task" : {
                        "type": "number|Task",
                        "comment": "The id or task object to set as complete"
                    },
                    "isCompleted" : {
                        "type": "boolean",
                        "comment": "The value to give to IsCompleted"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object setting the task to isCompleted"
                    }
                },
                "tests": [
                    "Refuses if the user does not have permission to set the task status",
                    "Undefined if user does not exist",
                    "Undefined if the task does not exist",
                    "Sets a single task status",
                    "Sets all children task statuses"
                ]
            },
            "GetTasks": {
                "purpose": "Gets the tasks in a single tasklist",
                "params": {
                    "tasklist" : {
                        "type": "number|Tasklist",
                        "comment": "The tasklist to get the tasks from"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user requesting the tasks"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if the user does not have permission to view tasks",
                    "Undefined if the tasklist does not exist",
                    "Refuses if the tasklist passed in is unset",
                    "Returns tasks to only the tasklist",
                    "Performs as advertised"                    
                ]
            },
            "SetTaskText": {
                "purpose": "Sets the text of a single task",
                "params": {
                    "task" : {
                        "type": "number|Task",
                        "comment": "The task to update"
                    },
                    "newText" : {
                        "type": "string",
                        "comment": "The new text for the task"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user setting the text"
                    }
                },
                "tests": [
                    "Refuses if the user does not have read permissions",
                    "Refuses if the user does not have write permissions",
                    "Undefined if user does not exist",
                    "Undefined if the task does not exist",
                    "Performs as advertised"
                ]
            },
            "DeleteTask": {
                "purpose": "Deletes a single task",
                "params": {
                    "task" : {
                        "type": "number|Task",
                        "comment": "The task to be deleted"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user deleting the task"
                    }
                },
                "tests": [
                    "Refuses if user does not have delete permissions",
                    "Refuses if user does not have read permissions",
                    "Undefined if user does not exist",
                    "Undefined if task does not exist",
                    "Deletes the task"
                ]
            },
            "SetTaskParent": {
                "purpose": "Sets the task parent to another id. Undefined means remove parent.",
                "params": {
                    "task" : {
                        "type": "number|Task",
                        "comment": "The task that is being set"
                    },
                    "parent" : {
                        "type": "number|Task",
                        "comment": "The id or task of the parent"
                    }
                },
                "tests": [
                    "Refuses if the user does not have write permissions",
                    "Refuses if the user does not have read permissions",
                    "Undefined if user does not exist",
                    "Removes parent if parent is undefined or null",
                    "Sets parent to the new parent if defined"
                ]
            }
        },
        "dependencies": {
            "{default as User}": "../data/user_account",
            "Taskboard": "../data/taskboard",
            "{default as Participant}": "../data/taskboard_participant",
            "Tasklist": "../data/tasklist",
            "{default as Task}": "../data/tasklist_task",
            "* as PermissionController": "./permission"
        },
        "todo": [
            "Add alias for toggling task status",
            "Add alias for setting task status finished",
            "Add alias for setting task status unfinished",
            "Add tagging functionality",
            "Add getting of a task parent"
        ]
    },
    "TaskboardRouter": {
        "filename": "taskboard",
        "folder": "routers",
        "type": "router",
        "post": {
            "/taskboard": "Get a taskboard",
            "/taskboard/create": "Create a new taskboard",
            "/taskboard/delete": "Delete a taskboard",
            "/tasklist/create": "Create a new tasklist in a taskboard",
            "/tasklist/delete": "Delete a tasklist",
            "/tasklist/move": "Move a tasklist to another board",
            "/tasklist/rename": "Change a tasklist name",
            "/tasklist/tasks": "Get the tasks in a tasklist",
            "/tasklist": "Get a tasklist",
            "/task/create": "Create a new task",
            "/task/toggle": "Toggles a task status",
            "/task/finished": "Sets a task to finished",
            "/task/unfinished": "Sets a task to unfinished",
            "/task": "Gets a single task",
            "/task/text": "Set the text of a task",
            "/task/delete": "Delete a task",
            "/task/parent": "Get a task parent",
            "/task/parent/set": "Set a task parent"
        }
    },
    "WorkorderController": {
        "filename": "workorder",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "CreateWorkorder": {
                "purpose": "Creates an invoice for use",
                "params": {
                    "customer" : {
                        "type": "number|Customer",
                        "comment": "The id or customer object for the invoice"
                    },
                    "employee" : {
                        "type": "number|User",
                        "comment": "The id or the user object to look up the employee for"
                    }
                },
                "tests": [
                    "Undefined if the customer does not exist",
                    "Refuses if the employee can not be found using the user id",
                    "Undefined if user does not exist",
                    "Refuses if the user does not have permission to create workorders",
                    "Creates a workorder",
                    "Returns a workorder object"
                ]
            },
            "RequestWorkorderLock": {
                "purpose": "Requests a lock for read/write on a workorder. The workorder id is the dictionary key",
                "params": {
                    "workorder" : {
                        "type": "number|Workorder",
                        "comment": "The id or workorder object to request the lock for"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object requesting the lock"
                    }
                },
                "tests": [
                    "Refuses if the user does not have read permissions on workorder",
                    "Refuses if the user does not have write permissions on workorder",
                    "Undefined if the workorder does not exist",
                    "Undefined if user does not exist",
                    "Refuses if the workorder is already locked",
                    "Refuses if the user is not an employee",
                    "Returns true"
                ]
            },
            "IsWorkorderLocked": {
                "purpose": "Checks whether or not the workorder is locked",
                "params": {
                    "workorder" : {
                        "type": "number|Workorder",
                        "comment": "The workorder to check"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": ""
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if the user does not have read permissions on the invoice",
                    "Refuses if the user does not have write permissions on the invoice",
                    "Undefined if the workorder does not exist",
                    "Returns whether or not the invoice is locked"
                ]
            },
            "ReleaseWorkorderLock": {
                "purpose": "Release the lock on a workorder object",
                "params": {
                    "lock" : {
                        "type": "number",
                        "comment": "The workorder id that is locked"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user releasing the workorder lock"
                    }
                },
                "tests": [
                    "Refuses if the user does not have the lock",
                    "Undefined if user does not exist",
                    "Refuses if the user is not an employee",
                    "Ignores if the workorder is not locked",
                    "Removes the lock from the workorder"
                ]
            },
            "AddToWorkorder": {
                "purpose": "Adds an item to the workorder",
                "params": {
                    "service" : {
                        "type": "number|Service",
                        "comment": "The service to add to the workorder"
                    },
                    "workorder" : {
                        "type": "number|Workorder",
                        "comment": "The workorder to add the service to"
                    },
                    "quantity" : {
                        "type": "number",
                        "comment": "The amount of the service to add to the workorder"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object adding to the invoice"
                    }
                },
                "tests": [
                    "Refuses if the user does not have permission to modify the invoice",
                    "Undefined if user does not exist",
                    "Refuses if the user is not an employee",
                    "Refuses if there is no lock",
                    "Refuses if lock is not owned by user",
                    "Refuses if the employee can not be found using the user id",
                    "Undefined if the service does not exist",
                    "Undefined if the workorder does not exist",
                    "Adds service to the workorder"
                ]
            },
            "RemoveFromWorkorder": {
                "purpose": "Removes a service from a workorder",
                "params": {
                    "item" : {
                        "type": "number|WorkorderItem",
                        "comment": "The workorder item to remove from the invoice"
                    },
                    "workorder" : {
                        "type": "number|Workorder",
                        "comment": "The workorder to remove the item from"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user trying to remove the item"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Undefined if the workorder does not exist",
                    "Undefined if the workorder item does not exist",
                    "Refuses if there is no lock",
                    "Refuses if lock is not owned by user",
                    "Refuses if the employee can not be found using the user id",
                    "Refuses if the user does not have permission to modify the invoice",
                    "Removes from the workorder"
                ]
            },
            "CloseWorkorder": {
                "purpose": "Closes a workorder that is currently open.",
                "params": {
                    "workorder" : {
                        "type": "number|Workorder",
                        "comment": "The id or Workorder object to be closed"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object attempting to close the workorder"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if the user does not have permission to modify the invoice",
                    "Undefined if the workorder does not exist",
                    "Refuses if there is no lock",
                    "Refuses if lock is not owned by user",
                    "Automatically releases any locks after closure"
                ]
            },
            "AddWorkorderContact": {
                "purpose": "Adds a contact to a workorder",
                "params": {
                    "contact" : {
                        "type": "number|CustomerContact",
                        "comment": "The id or Contact object to be added to the workorder"
                    },
                    "workorder" : {
                        "type": "number|Workorder",
                        "comment": "The workorder to add the contact to"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user adding the contact"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Undefined if the workorder does not exist",
                    "Undefined if the contact does not exist",
                    "Refuses if the user does not have write permissions on the invoice",
                    "Refuses if there is no lock",
                    "Refuses if lock is not owned by user",
                    "Refuses if the user does not have read permissions on the invoice",
                    "Adds the contact to the workorder"
                ]
            },
            "RemoveWorkorderContact": {
                "purpose": "Removes a contact from a workorder",
                "params": {
                    "contact" : {
                        "type": "number|WorkorderContact",
                        "comment": "The id or contact object to remove from the workorder"
                    },
                    "workorder" : {
                        "type": "number|Workorder",
                        "comment": "The id or workorder object to remove the contact from"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user removing the contact from the board"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Undefined if the workorder does not exist",
                    "Undefined if the contact does not exist",
                    "Refuses if the user does not have write permissions on the invoice",
                    "Refuses if the user does not have read permissions on the invoice",
                    "Refuses if there is no lock",
                    "Refuses if lock is not owned by user",
                    "Removes the contact from the workorder"
                ]
            },
            "AddTransaction": {
                "purpose": "Adds a transaction to a workorder",
                "params": {
                    "transaction" : {
                        "type": "number|Transaction",
                        "comment": "The transaction object"
                    },
                    "workorder" : {
                        "type": "number|Workorder",
                        "comment": "The workorder to add the transaction to"
                    },
                    "contact" : {
                        "type": "number|CustomerContact",
                        "comment": "The contact that authorized the transaction"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Undefined if the workorder does not exist",
                    "Undefined if the contact does not exist",
                    "Refuses if the contact is not allowed to make payments",
                    "Refuses if the contact is not a contact of the invoice",
                    "Undefined if the transaction object does not exist with stripe",
                    "Links transaction to the workorder"
                ]
            },
            "ConvertEstimateToWorkorder": {
                "purpose": "Converts an estimate into a workorder",
                "params": {
                    "estimate" : {
                        "type": "number|Estimate",
                        "comment": "The id or Estimate object to convert"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object requesting the conversion"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Undefined if the estimate does not exist",
                    "Refuses if the user does not have permission to create invoices",
                    "Creates a workorder based on the estimate",
                    "Refuses if there is no lock",
                    "Refuses if lock is not owned by user",
                    "New estimate contains all items of estimate",
                    "New estimate contains all contacts of estimate"
                ]
            },
            "GetWorkorder": {
                "purpose": "Gets a workorder",
                "params": {
                    "workorder" : {
                        "type": "number|Workorder",
                        "comment": "The id or workorder object to retrieve"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user requesting the workorder"
                    },
                    "populated" : {
                        "type": "boolean",
                        "comment": "Whether or not he workorders should also have items, transactions, contacts, etc",
                        "default": false
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Undefined if the workorder does not exist",
                    "Refuses if the user does not have read permissions on the invoice",
                    "Gets a populated version of the workorder"
                ]
            },
            "ListWorkorders": {
                "purpose": "Gets a list of Workorders. Alias for PageWorkorders(page = 1)",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The amount of workorders to get (max 100)"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the listing"
                    },
                    "populated" : {
                        "type": "boolean",
                        "comment": "Whether or not the workorders should also have items, transactions, contacts, etc",
                        "default": false
                    }
                },
                "tests": [
                    "Undefined  if user does not exist",
                    "Refuses if user does not have read permission on Workorders",
                    "Returns list of workorders",
                    "Returns list of workorders with populated items if populated true"
                ]
            },
            "PageWorkorders": {
                "purpose": "Gets a page of workorders.",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The amount of workorders to get (max 100)"
                    },
                    "page" : {
                        "type": "number",
                        "comment": "The page number to get (starting point 1)"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the workorders"
                    },
                    "populated" : {
                        "type": "boolean",
                        "comment": "Whether or not he workorders should also have items, transactions, contacts, etc",
                        "default": false
                    }
                },
                "tests": [
                    "Undefined  if user does not exist",
                    "Refuses if user does not have read permission on Workorders",
                    "Returns list of workorders",
                    "Returns list of workorders with populated items if populated true"
                ]
            }
        },
        "dependencies": {
            "Workorder": "../data/workorder",
            "WorkorderContact": "../data/workorder_contact",
            "CustomerContact": "../data/customer_contact",
            "WorkorderTransaction": "../data/workorder_transaction",
            "Transaction": "../data/transaction",
            "{default as User}": "../data/user_account",
            "Estimate": "../data/estimate",
            "WorkorderItem": "../data/workorder_item",
            "Service": "../data/service",
            "Customer" : "../data/customer",
            "* as LockControllerr": "./lock"
        }
    },
    "WorkorderRouter": {
        "filename": "workorder",
        "folder": "routers",
        "type": "router",
        "post": {
            "/": "Load a workorder",
            "/page": "Get a page of workorders",
            "/list": "Get a list of workorders",
            "/create": "Create a new workorder",
            "/close": "Close a workorder",
            "/convert": "Convert an estimate to a workorder",
            "/lock": "Open a workorder. (lock)",
            "/lock/status": "Get whether or not it is locked",
            "/lock/release": "Release the lock on a workorder",
            "/lock/user": "Who locked the workorder?",
            "/item": "Get a workorder item",
            "/item/list": "List the items on the workorder",
            "/item/add": "Add an item to the workorder",
            "/item/remove": "Remove an item from the workorder",
            "/item/update": "Update an item on the workorder",
            "/contact": "Get a contact on a workorder",
            "/contact/add": "Add a contact to the workorder",
            "/contact/remove": "Remove a contact from the workorder",
            "/transaction": "Get a single transaction on a workorder",
            "/transaction/add": "Add a transaction to the workorder",
            "/transaction/adjust": "Adjust a transaction on the workorder",
            "/transaction/remove": "Remove a transaction from a workorder (-amt)",
            "/transaction/list": "Get all transactions on a workorder"
        },
        "note": "Pretend everything is prefixed with workorder"
    },
    "EstimateController": {
        "filename": "estimate",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "CreateEstimate": {
                "purpose": "Creates an estimate. Allows customers to see what things should cost before they commit.",
                "params": {
                    "customer" : {
                        "type": "number|Customer",
                        "comment": "The id or Customer object the estimate is for"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object creating the estimate"
                    },
                    "validity_period" : {
                        "type": "number",
                        "default": 14,
                        "comment": "A positive integer "
                    },
                    "items" : {
                        "type": "Service[]",
                        "comment": "An array of service Ids or service objects to add to the estimate. Optional parameter",
                        "default": null
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if the user is not an employee",
                    "Refuses if the validity period is not above 0",
                    "Undefined if the the customer does not exist",
                    "Refuses if the user does not have permission to create estimates",
                    "Ignores the invalid services",
                    "Creates the estimate"
                ]
            },
            "LockEstimate": {
                "purpose": "Locks estimate. Alias for lock",
                "params": {
                    "estimate" : {
                        "type": "number|Estimate",
                        "comment": "The id or Estimate object to lock"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object locking the estimate"
                    }
                }
            },
            "ReleaseLock": {
                "purpose": "Release the lock on an estimate",
                "params": {
                    "estimate" : {
                        "type": "number|Estimate",
                        "comment": "The id or Estimate object to release from lock"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object releasing the lock"
                    }
                },
                "tests": [
                    "Undefined if user or estimate does not exist",
                    "Refuses if user does not own the lock, and does not have force unlock permission",
                    "Releases lock"
                ]
            },
            "AddItem": {
                "purpose": "Adds an item to the estimate",
                "params": {
                    "service" : {
                        "type": "number|Service",
                        "comment": "The id or Service object to add to the invoice"
                    },
                    "estimate" : {
                        "type": "number|Estimate",
                        "comment": "The id or Estimate object to add to the invoice"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object adding to the invoice"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if the user is not an employee",
                    "Refuses if the user does not have write permissions on the invoice",
                    "Refuses if the user does not have read permissions on the invoice",
                    "Undefined if the service does not exist",
                    "Undefined if the estimate does not exist",
                    "Refuses if there is no lock",
                    "Refuses if lock is not owned by user",                   
                    "Adds item to the estimate"
                ]
            },
            "RemoveItem": {
                "purpose": "Removes an item from an estimate",
                "params": {
                    "item" : {
                        "type": "number|EstimateItem",
                        "comment": "The id or EstimateItem object to remove"
                    },
                    "estimate" : {
                        "type": "number|Estimate",
                        "comment": "The id or estimate object to have the item removed"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user object removing the item from the estimate"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Undefined if the estimate does not exist",
                    "Undefined if the item does not exist on the estimate",
                    "Refuses if the user does not have write permissions on the estimate",
                    "Refuses if the user does not have read permissions on the estimate",
                    "Refuses if there is no lock",
                    "Refuses if lock is not owned by user",                  
                    "Removes the item from the estimate"
                ]
            },
            "SetValidityPeriod": {
                "purpose": "Sets the validity period of the estimate. Must be greater than 0",
                "params": {
                    "period" : {
                        "type": "number",
                        "comment": "How many days the estimate is valid for after opening"
                    },
                    "estimate" : {
                        "type": "number|Estimate",
                        "comment": "The id or estimate object to have the period set"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user setting the estimate period"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Undefined if the estimate does not exist",
                    "Refuses if the user does not have write permissions on the estimate",
                    "Refuses if the user does not have read permissions on the estimate",
                    "Refuses if the validity period is not above 0",
                    "Refuses if there is no lock",
                    "Refuses if lock is not owned by user",   
                    "Sets the validity period"
                ]
            },
            "GetEstimate": {
                "purpose": "Gets a populated estimate",
                "params": {
                    "estimate" : {
                        "type": "number|Estimate",
                        "comment": "The id or estimate object to work with"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object requesting the estimate"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Undefined if the estimate does not exist",
                    "Refuses if the user does not have read permissions",
                    "Gets a populated version of the estimate"
                ]
            },
            "AddContact": {
                "purpose": "Adds a contact to the estimate",
                "params": {
                    "contact" : {
                        "type": "number|CustomerContact",
                        "comment": "The id or CustomerContact object to add to the estimate"
                    },
                    "estimate" : {
                        "type": "number|Estimate",
                        "comment": "The id or estimate object to add the contact to"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user adding the contact to the estimate"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Undefined if the contact does not exist",
                    "Undefined if the estimate does not exist",
                    "Refuses if the user does not have read permissions",
                    "Refuses if the user does not have write permissions",
                    "Refuses if there is no lock",
                    "Refuses if lock is not owned by user",   
                    "Refuses if the user is not an employee",
                    "Adds the contact to the estimate"
                ]
            },
            "RemoveContact": {
                "purpose": "Removes a contact from the estimate",
                "params": {
                    "contact" : {
                        "type": "number|EstimateContact",
                        "comment": "The id or WorkorderContact object to remove from the estimate"
                    },
                    "estimate" : {
                        "type": "number|Estimate",
                        "comment": "The id or Estimate object to remove the contact from"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object removing the contact"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if the user does not have write permissions on the estimate",
                    "Refuses if the user does not have read permissions on the estimate",
                    "Ignores if the contact is not in the estimate",
                    "Refuses if there is no lock",
                    "Refuses if lock is not owned by user",   
                    "Undefined if the estimate does not exist",
                    "Removes the contact from the estimate"
                ]
            }
        },
        "dependencies": {
            "Estimate": "../data/estimate",
            "EstimateContact": "../data/estimate_contact",
            "Customer": "../data/customer",
            "CustomerContact": "../data/customer_contact",
            "EstimateItem": "../data/estimate_item",
            "{default as User}": "../data/user_account",
            "Service": "../data/service",
            "* as LockController": "./lock"
        }
    },
    "EstimateRouter": {
        "filename": "estimate",
        "folder": "routers",
        "type": "router",
        "post": {
            "/": "Load an estimate",
            "/page": "Load a page of estimates",
            "/list": "Load a list of estimates",
            "/create": "Create a new estimate",
            "/close": "Close an estimate",
            "/lock": "Open an estimate",
            "/lock/status": "Check whether the estimate is locked",
            "/lock/release": "Close an estimate",
            "/lock/user": "Get used id that locked invoice",
            "/item": "Get an item on an estimate",
            "/item/list": "Get all items on the estimate",
            "/item/add": "Add an item to the estimate",
            "/item/remove": "Remove an item from the estimate",
            "/item/update": "Update an item on the estimate",
            "/contact": "Get a contact on an estimate",
            "/contact/add": "Add a contact to the estimate",
            "/contact/remove": "Remove a contact from the estimate",
            "/period": "Get the validity period",
            "/period/set": "Set the validity period"
        }
    },
    "EmployeeController": {
        "filename": "employee",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "ClockIn": {
                "purpose": "Clock an employee in",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object of the employee clocking in"
                    }
                },
                "tests": [
                    "Refuses if the user is not an employee",
                    "Undefined if user does not exist",
                    "Returns message saying they're clocked in if there's an active workday going."
                ]
            },
            "ClockOut": {
                "purpose": "Clock an employee out",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object of the employee clocking out"
                    }
                },
                "tests": [
                    "Refuses if the user is not an employee",
                    "Undefined if user does not exist",
                    "Refuses if there is not an active workday going."
                ]
            },
            "AddEmployee": {
                "purpose": "Creates a new employee",
                "params": {
                    "employeeOrFirstName" : {
                        "type": "Employee|string",
                        "comment": "Either an employee object (ignores other params), or a string for the first name"
                    },
                    "middle" : {
                        "type": "string",
                        "comment": "The middle name of the employee"
                    },
                    "last" : {
                        "type": "string",
                        "comment": "The last name of the employee"
                    },
                    "phone" : {
                        "type": "string",
                        "comment": "The phone number of the employee"
                    },
                    "address" : {
                        "type": "string",
                        "comment": "The home address of the employee"
                    },
                    "postal_code" : {
                        "type": "string",
                        "comment": "The postal code of the employee"
                    },
                    "sin" : {
                        "type": "string",
                        "comment": "A 9 character long string for the employee's SIN"
                    },
                    "birthday" : {
                        "type": "Date",
                        "comment": "The birthdate of the employee"
                    },
                    "is_active" : {
                        "type": "boolean",
                        "comment": "Whether or not the employee is to be set as active right now",
                        "default": false
                    },
                    "about" : {
                        "type": "string",
                        "comment": "The about for the employee",
                        "default": null
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object to be linked"
                    }
                },
                "tests": [
                    "Checks if the first param is employee, and runs with it if it is",
                    "Ignores the other parameters if type of first parameter is employee",
                    "Refuses if any of the required fields are missing",
                    "Undefined if user does not exist",
                    "Refuses if the user already has an employee linked",
                    "Refuses if the user is inactive",
                    "Creates a new employee"
                ]
            },
            "GetEmployee": {
                "purpose": "Gets a single employee (checks cache first)",
                "params": {
                    "employee" : {
                        "type": "number|Employee",
                        "comment": "The id or Employee object. Fills Employee object and returns, or returns Employee object."
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user requesting the employee object"
                    },
                    "confidentials" : {
                        "type": "boolean",
                        "comment": "Whether or not to include confidential information in the populated object"
                    }
                },
                "tests": [
                    "Refuses if the user is not allowed to see employees",
                    "Undefined if user does not exist",
                    "Refuses if the confidentials true and user does not have permission",
                    "Excludes confidentials if confidentials false",
                    "Includes confidentials if confidentials true",
                    "Gets filled employee object"
                ]
            },
            "GetEmployeeFromUser": {
                "purpose": "Gets an employee object",
                "params": {
                    "employee" : {
                        "type": "number|User",
                        "comment": "The User to get the employee from"
                    }
                },
                "tests": [
                    "Returns null if there is no employee",
                    "Returns employee"
                ]
            },
            "FireEmployee": {
                "purpose": "Fires an employee",
                "params": {
                    "employee" : {
                        "type": "number|Employee",
                        "comment": "The employee to set as inactive"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user firing the employee. Used for permission checking."
                    }
                },
                "tests": [
                    "Refuses if the user does not have permission to fire.",
                    "Undefined if user does not exist",
                    "Undefined if the employee does not exist",
                    "Refuses if the user is not an employee",
                    "Sets the employee as inactive."
                ]
            },
            "LoadEmployees": {
                "purpose": "Caches all employees into memory for easy lookup. Only active employees.",
                "params": {
                    
                },
                "tests": [
                    "Loads all employees",
                    "Loads only active"
                ]
            },
            "CacheEmployee": {
                "purpose": "Adds an employee to the cache after creating a new employee",
                "params": {
                    "employee" : {
                        "type": "Employee",
                        "comment": "A populated, valid, employee object"
                    }
                },
                "tests": [
                    "Adds employee object to the cache"
                ]
            },
            "UncacheEmployee": {
                "purpose": "Removes an employee that has been fired from the cache",
                "params": {
                    "employee" : {
                        "type": "number|Employee",
                        "comment": "The employee object to remove from the cache"
                    }
                },
                "tests": [
                    "Refuses if the Employee object is invalid",
                    "Undefined if the employee does not exist",
                    "Errors if the employee can not be found",
                    "Removes the employee from the cache"
                ]
            },
            "ListEmployees": {
                "purpose": "Gets a list of active employees (max 100). Binding to Page, with page = 1",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The amount to return"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user requesting the listing"
                    },
                    "includeInactive" : {
                        "type": "boolean",
                        "comment": "Whether or not to include the inactive employees",
                        "default": false
                    },
                    "confidentials" : {
                        "type": "boolean",
                        "comment": "Whether or not to return the confidential information",
                        "default": false
                    }
                },
                "tests": [
                    "Returns only non-private details if confidentials false",
                    "Includes inactive if includeInactive true",
                    "Excludes inactive if includeInactive false",
                    "Includes private details if confidentials true",
                    "Refuses if the user is not allowed to see employees",
                    "Refuses if confidentials is true, and user is not permitted to see confidential details",
                    "Undefined if user does not exist",
                    "Caps out at 100",
                    "Returns a list of populated employee objects"
                ]
            },
            "PageEmployees": {
                "purpose": "Gets a page of active employees",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The amount to return"
                    },
                    "page" : {
                        "type": "number",
                        "comment": "The page number to return (start point 1)"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user requesting the listing"
                    },
                    "includeInactive" : {
                        "type": "boolean",
                        "comment": "Whether or not to include the inactive employees",
                        "default": false
                    },
                    "confidentials" : {
                        "type": "boolean",
                        "comment": "Whether or not to return the confidential information",
                        "default": false
                    }
                },
                "tests": [
                    "Returns only non-private details if confidentials false",
                    "Includes inactive if includeInactive true",
                    "Excludes inactive if includeInactive false",
                    "Includes private details if confidentials true",
                    "Refuses if the user is not allowed to see employees",
                    "Refuses if confidentials is true, and user is not permitted to see confidential details",
                    "Undefined if user does not exist",
                    "Refuses negative page",
                    "Caps out at 100",
                    "Returns a list of populated employee objects"
                ]
            }
        },
        "dependencies": {
            "Employee": "../data/employee",
            "{default as User}": "../data/user_account",
            "{default as Workday}": "../data/employee_workday",
            "* as Data": "../data"
        }
    },
    "EmployeeRouter": {
        "filename": "employee",
        "folder": "routers",
        "type": "router",
        "post": {
            "/ClockIn": "Clock an employee in",
            "/ClockOut": "Clock an employee out",
            "/employee": "Get an employee",
            "/employee/create": "Add an employee",
            "/employee/user": "Get the employee from a user id",
            "/employee/fire": "Fire an employee",
            "/employee/list": "List employees",
            "/employee/page": "Get a page of employees"
        }
    },
    "TagController": {
        "filename": "tag",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "TagObject": {
                "purpose": "Tags an object",
                "params": {
                    "obj" : {
                        "type": "Object",
                        "comment": "Object to be tagged. NEEDS to have tablename."
                    },
                    "tagOrName" : {
                        "type": "string|Tag",
                        "comment": "The name of a new tag, or a Tag object"
                    },
                    "color" : {
                        "type": "any",
                        "comment": "Must have at least R, G, and B (upper or lower), with optional A (default 255), or a length 3-4 array. [r, g, b, a = undefined]"
                    }
                },
                "tests": [
                    "Refuses bad form color object",
                    "Refuses bad form name",
                    "Refuses object without tablename",
                    "Creates new tag if it doesn't exist",
                    "Creates tag pair using tablename"
                ]
            },
            "UntagObject": {
                "purpose": "Removes the tag from an object",
                "params": {
                    "obj" : {
                        "type": "Object",
                        "comment": "Must have tablename. The object to be untagged"
                    },
                    "tag" : {
                        "type": "number|Tag",
                        "comment": "The tag id"
                    }
                },
                "tests": [
                    "Refuses missing tablename",
                    "Refuses nonexistent tag",
                    "Removes tag",
                    "Removes tag pair"
                ]
            },
            "GetTags": {
                "purpose": "Gets the tags for an object",
                "params": {
                    "obj" : {
                        "type": "Object",
                        "comment": "Requires tablename. Object to look up."
                    }
                },
                "tests": [
                    "Returns all tags belonging to an object",
                    "Returns tag objects"
                ]
            },
            "StripTags": {
                "purpose": "Removes all tags from an object. Use custom SQL to reduce query count. DROP FROM tag WHERE id=, then DROP from tablename_tag WHERE tablename_id=Y",
                "params": {
                    "obj" : {
                        "type": "Object",
                        "comment": "Requires tablename. The object to remove all tags from."
                    }
                },
                "tests": [
                    "Ignores invalid object",
                    "Removes all pairings",
                    "Removes all tags"
                ]
            }
        },
        "dependencies": {
            "Tag": "../data/tag",
            "* as Data": "../data"
        }
    },
    "ServiceController": {
        "filename": "service",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "CreateService": {
                "purpose": "Creates a new service",
                "params": {
                    "nameOrService" : {
                        "type": "string|Service",
                        "comment": "The name of the service, or new service object"
                    },
                    "description" : {
                        "type": "string",
                        "comment": "The description of the service"
                    },
                    "price" : {
                        "type": "number",
                        "comment": "The price of the service"
                    },
                    "default_quantity" : {
                        "type": "number",
                        "comment": "The default quantity of the service"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user adding the service"
                    }
                },
                "tests": [
                    "Refuses missing parameters",
                    "Refuses invalid types",
                    "Refuses if the user does not have add permissions for the services",
                    "Refuses if the user is not an employee",
                    "Creates the service"
                ]
            },
            "GetService": {
                "purpose": "Gets a single service",
                "params": {
                    "svc" : {
                        "type": "number|Service",
                        "comment": "The id or service object to retrieve"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object requesting the service"
                    }
                },
                "tests": [
                    "Refuses if the user does not have permission to read services",
                    "Undefined if the service does not exist",
                    "Undefined if user does not exist",
                    "Refuses if the user is not an employee",
                    "Returns a single service object"
                ]
            },
            "ListServices": {
                "purpose": "Gets a list of services alphabetically ordered. Bind to default.",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The quantity to return. Max 100."
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user requesting the services listing"
                    }
                },
                "tests": [
                    "Returns a list of Services",
                    "Refuses if the user is not an employee"
                ]
            },
            "PageServices": {
                "purpose": "Gets a page of services. Bind to default.",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The amout per page to get"
                    },
                    "page" : {
                        "type": "number",
                        "comment": "The page number (starting at 1) to get"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user requesting the services listing"
                    }
                },
                "tests": [
                    "Refuses if the user is not an employee",
                    "Undefined if user does not exist",
                    "Refuses if user does not have read permission on Services",
                    "Refuses negative page",
                    "Returns a page of services"                    
                ]
            },
            "UpdateService": {
                "purpose": "Updates a service object.",
                "params": {
                    "service" : {
                        "type": "number|Service",
                        "comment": "The id or service object to update"
                    },
                    "obj" : {
                        "type": "Object",
                        "comment": "The update object. Accepts description, price, and default_quantity"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user id or object requesting an update on the service"
                    }
                },
                "tests": [
                    "Refuses if the user does not have permission to update service",
                    "Undefined if user does not exist",
                    "Refuses if the user is not an employee",
                    "Undefined if the service does not exist",
                    "Refuses bad form update object (no valid fields)",
                    "Updates the service"
                ]
            },
            "ArchiveService": {
                "purpose": "Sets a service to archived. Alias for SetServiceArchive = true",
                "params": {
                    "service" : {
                        "type": "number|Service",
                        "comment": "The id or service object to set to archived"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object archiving the service"
                    }
                },
                "tests": [
                    "Undefined if user or service are undefined",
                    "Refuses if user does not have read permission on services",
                    "Refuses if user does not have write permission on services",
                    "Sets service to archived"
                ]
            },
            "UnarchiveService": {
                "purpose": "Sets a service to active. Alias for SetServiceArchived = false",
                "params": {
                    "service" : {
                        "type": "number|Service",
                        "comment": "The id or Service object to remove from archive"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object removing the object from the archive"
                    }
                },
                "tests": [
                    "Undefined if user or service are undefined",
                    "Refuses if user does not have read permission on services",
                    "Refuses if user does not have write permission on services",
                    "Sets service to unarchived"
                ]
            },
            "SetServiceArchived": {
                "purpose": "Sets whether or not the service is archived",
                "params": {
                    "service" : {
                        "type": "number|Service",
                        "comment": "The id or Service object to set the archive status on"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user object setting the archive status"
                    },
                    "status" : {
                        "type": "boolean",
                        "comment": "Whether or not the object is to be archived"
                    }
                },
                "tests": [
                    "Undefined if user or service are undefined",
                    "Refuses if user does not have read permission on services",
                    "Refuses if user does not have write permission on services",
                    "Sets service to status"
                ]
            }
        },
        "dependencies": {
            "Service": "../data/service",
            "{default as User}": "../data/user_account",
            "* as Data": "../data"
        }
    },
    "ServiceRouter": {
        "filename": "service",
        "folder": "routers",
        "type": "router",
        "post": {
            "/": "Get a service",
            "/create": "Create a new service",
            "/list": "Get a list of services",
            "/page": "Get a page of services",
            "/update": "Update a service",
            "/archive": "Archive a service",
            "/unarchive": "Remove a service from archival"
        }
    },
    "PurchaseOrderController": {
        "filename": "purchase-order",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "CreatePurchaseOrder": {
                "purpose": "Creates a new purchase order",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object requesting the creation of the PO"
                    },
                    "memo" : {
                        "type": "string",
                        "comment": "A max 400 character memo for the purchase order"
                    },
                    "... tags" : {
                        "type": "Tag[]",
                        "comment": "Optional tags to add to the purchase order"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if the user is not an employee",
                    "Refuses if the user does not have read permissions on purchase orders",
                    "Refuses if the user does not have write permissions on purchase orders",
                    "Creates tags if the tags exist",
                    "Creates purchase order",
                    "Returns created purchase order object"
                ]
            },
            "AddItem": {
                "purpose": "Creates a new item, and adds it to the workorder.",
                "params": {
                    "name" : {
                        "type": "string",
                        "comment": "The SKU of the item to be purchased"
                    },
                    "description" : {
                        "type": "string",
                        "comment": "Max 360 characters, description of item to be purchased"
                    },
                    "quantity" : {
                        "type": "number",
                        "comment": "How many of the thing to buy"
                    },
                    "price" : {
                        "type": "number",
                        "comment": "The price of the thing to buy"
                    },
                    "po" : {
                        "type": "number|PurchaseOrder",
                        "comment": "The id or purchase order object to add the item to"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object to add this item to"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if the user does not have write permissions on purchase orders",
                    "Refuses if the user does not have read permissions on purchase orders",
                    "Refuses if the user is not an employee",
                    "Refuses if there are missing fields",
                    "Refuses if there is no lock",
                    "Refuses if lock is not owned by user",   
                    "Undefined if the PO does not exist",
                    "Creates new item",
                    "Adds item to the PO"
                ]
            },
            "RemoveItem": {
                "purpose": "Removes an item from the purchase order",
                "params": {
                    "poItem" : {
                        "type": "number|PurchaseOrderItem",
                        "comment": "The id or PurchaseOrderItem object to be removed"
                    },
                    "purchaseOrder" : {
                        "type": "number|PurchaseOrder",
                        "comment": "The id or purchase order object to have the item removed from"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object removing the item"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if the user does not have write permissions on purchase order",
                    "Refuses if the user does not have read permissions on purchase order",
                    "Refuses if the user is not an employee",
                    "Refuses if there is no lock",
                    "Refuses if lock is not owned by user",   
                    "Removes item from invoice"
                ]
            },
            "GetPurchaseOrder": {
                "purpose": "Gets a single purchase order object",
                "params": {
                    "po" : {
                        "type": "number|PurchaseOrder",
                        "comment": "The id or PurchaseOrder object to retrieve"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object retrieving the object"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if the user does not have read permissions on the purchase order",
                    "Undefined if the PO does not exist",
                    "Returns a populated PO"
                ]
            },
            "UpdateItem": {
                "purpose": "Updates an item on a purchase order",
                "params": {
                    "poitem" : {
                        "type": "number|PurchaseOrderItem",
                        "comment": "The id or PurchaseOrderItem object to update"
                    },
                    "updateobj" : {
                        "type": "Object",
                        "comment": "The object used to update the PurchaseOrderItem"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object attempting to update the object"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Undefined if the item does not exist",
                    "Refuses bad form update object (no valid fields)",
                    "Refuses if user does not have read permissions on PO",
                    "Refuses if user does not have write permissions on PO",
                    "Refuses if there is no lock",
                    "Refuses if lock is not owned by user",   
                    "Updates po item"
                ]
            },
            "UpdateMemo": {
                "purpose": "Updates the memo of a purchase order",
                "params": {
                    "memo" : {
                        "type": "string",
                        "comment": "The new memo"
                    },
                    "po" : {
                        "type": "number|PurchaseOrder",
                        "comment": "The PO to update"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object updating the memo"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if the user does not have read permissions on purchase orders",
                    "Refuses if the user does not have write permissions on purchase orders",
                    "Undefined if the purchase order does not exist",
                    "Refuses if memo is longer than 400 characters",
                    "Refuses if there is no lock",
                    "Refuses if lock is not owned by user",   
                    "Updates memo on a purchase order"
                ]
            },
            "ListPurchaseOrders": {
                "purpose": "Gets a list of purchase orders",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The amount of purchase orders to get (max 100)"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the purchase orders"
                    }
                },
                "tests": [
                    "Returns a list of Purchase Orders",
                    "Undefined if user does not exist",
                    "Refuses if user does not have read permissions on purchase orders"
                ]
            },
            "LockPurchaseOrder": {
                "purpose": "Request for locking a purchase order",
                "params": {
                    "workorder" : {
                        "type": "number|PurchaseOrder",
                        "comment": "The id or Workorder object to lock"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the lock"
                    }
                },
                "tests": [
                    "Refuses if there is already a lock on the object",
                    "Refuses if user does not have write permission on purchase orders",
                    "Ignores if user does not exist",
                    "Returns true if locked"
                ]
            },
            "ReleaseLock": {
                "purpose": "Release a lock on a purchase order",
                "params": {
                    "po" : {
                        "type": "number|PurchaseOrder",
                        "comment": "The id or Purchase Order object to release the lock on"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object attempting to release the lock"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Undefined if po does not exist",
                    "Refuses if user is not the owner of the lock, and does not have force unlock",
                    "Unlocks purchase order"
                ]
            },
            "PagePurchaseOrders": {
                "purpose": "Gets a page of purchase orders",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The amount of purchase orders to get in a page"
                    },
                    "page" : {
                        "type": "number",
                        "comment": "The page number to get (start point 1)"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the purchase orders"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if the user does not have read permissions on purchase orders",
                    "Refuses negative page",
                    "Returns a page of Purchase Orders"
                ]
            },
            "DeletePurchaseOrder": {
                "purpose": "Deletes a purchase order ",
                "params": {
                    "po" : {
                        "type": "number|PurchaseOrder",
                        "comment": "The id or purchase order object to be deleted"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object deleting the purchase order"
                    },
                    "force" : {
                        "type": "boolean",
                        "comment": "Whether or not to force deletion (deletes all items)",
                        "default": false
                    }
                },
                "tests": [
                    "Refuses if user does not have write permissions on purchase orders",
                    "Refuses if user does not have read permissions on purchase orders",
                    "Undefined if user does not exist",
                    "Undefined if purchase order does not exist",
                    "Refuses if items exist in PO and force is false",
                    "Refuses if there are payments on the PO",
                    "Refuses if the PO has existed for more than 10 minutes",
                    "Refuses if there is no lock",
                    "Refuses if lock is not owned by user",   
                    "Deletes purchase order",
                    "Deletes attached items when force is true"
                ]
            }
        },
        "dependencies": {
            "PurchaseOrder": "../data/purchase_order",
            "PurchaseOrderItem": "../data/purchase_order_item",
            "{default as User}": "../data/user_account",
            "Tag": "../data/tag",
            "* as Data": "../data",
            "* as LockController": "./lock"
        }
    },
    "PurchaseOrderRouter": {
        "filename": "purchase-order",
        "folder": "routers",
        "type": "router",
        "post": {
            "/": "Get a purchase order",
            "/list": "Get a list of purchase orders",
            "/page": "Get a page of purchase orders",
            "/lock": "Lock a purchase order (open it)",
            "/release": "Release a purchase order from the lock",
            "/delete": "Delete a purchase order (deletes only if it has not been processed)",
            "/item": "Get an item on a purchase order",
            "/item/add": "Add a new item to the purchase order",
            "/item/list": "Get all items on the purchase order",
            "/item/update": "Update a single item on the purchase order",
            "/item/remove": "Remove an item from the purchase order",
            "/memo": "Get the memo from a purchase order",
            "/memo/set": "Set the memo on a purchase order"
        }
    },
    "PayrollController": {
        "filename": "payroll",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "CreatePeriod": {
                "purpose": "Creates a new pay period for clocking use",
                "params": {
                    "start_date" : {
                        "type": "Date",
                        "comment": "When the pay period starts"
                    },
                    "end_date" : {
                        "type": "Date",
                        "comment": "When the pay period ends"
                    },
                    "payday" : {
                        "type": "Date",
                        "comment": "When the employee is to be paid"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The optional id or user object asking for a new pay period.",
                        "default": null
                    }
                },
                "tests": [
                    "Creates a new pay period",
                    "Refuses if there's an existing period in that timeframe",
                    "Refuses if the user does not have permission to create new pay periods",
                    "Refuses if the starting date is in the past",
                    "Refuses if user does not have write permission on payroll",
                    "Refuses if the start date is after the end date"
                ]
            },
            "CreatePayroll": {
                "purpose": "Creates a Payroll instance for a single employee",
                "params": {
                    "empl" : {
                        "type": "number|Employee",
                        "comment": "The id or Employee object to create the payroll for"
                    },
                    "period" : {
                        "type": "number|PayPeriod",
                        "comment": "The id or PayPeriod object to add the user to."
                    },
                    "... items" : {
                        "type": "PayrollItem[]",
                        "comment": "The array of payroll items to add. (usage: Salary, automated bonus, etc)",
                        "default": null
                    }
                },
                "tests": [
                    "Refuses if there is already an active payroll for the employee",
                    "Undefined if the period does not exist",
                    "Undefined if the employee does not exist",
                    "Refuses if user does not have write permissions on payroll",
                    "Refuses if user does not have read permissions on payroll",
                    "Creates a new payroll",
                    "Adds all of the items"
                ]
            },
            "AddPayrollItem": {
                "purpose": "Add an item to a payroll for an employee",
                "params": {
                    "payroll" : {
                        "type": "number|Payroll",
                        "comment": "The id or Payroll object to add the item to"
                    },
                    "name" : {
                        "type": "string",
                        "comment": "A max 50 character length name of the transaction (Eg: REGULAR-1.0-HRLY)"
                    },
                    "amt" : {
                        "type": "number",
                        "comment": "The amount of the money being paid/deducted ($x/quantity)"
                    },
                    "quan" : {
                        "type": "number",
                        "comment": "The quantity of the amount to be paid/deducted ($x/quantity)"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object adding the item. Optional.",
                        "default": -1
                    }
                },
                "tests": [
                    "Undefined if payroll entry does not exist",
                    "Refuses if name is longer than 50 characters",
                    "Undefined if user does not exist",
                    "Refuses on missing values",
                    "Refuses if user does not have read permissions on payroll",
                    "Refuses if user does not have write permissions on payroll"
                ]
            },
            "RemovePayrollItem": {
                "purpose": "Removes a payroll item from a payroll instance",
                "params": {
                    "item" : {
                        "type": "number|PayrollItem",
                        "comment": "The id or payroll item to remove"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User removing the payroll item",
                        "default": -1
                    }
                },
                "tests": [
                    ""
                ]
            },
            "UpdatePayrollItem": {
                "purpose": "Updates a payroll item",
                "params": {
                    "item" : {
                        "type": "number|PayrollItem",
                        "comment": "The payroll item to be updated"
                    },
                    "obj" : {
                        "type": "Object",
                        "comment": "The update object itself. Supports name, amount, and quantity."
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user attempting to update the payroll item"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if user does not have write permissions on payroll",
                    "Refuses if user does not have read permissions on payroll",
                    "Undefined if payrollitem does not exist",
                    "Refuses bad form update object (no valid fields)",
                    "Updates all fields"
                ]
            },
            "UpdatePayPeriod": { 
                "purpose": "Update a pay period's date range or pay date",
                "params": {
                    "period" : {
                        "type": "number|PayPeriod",
                        "comment": "The id or PayPeriod object to update"
                    },
                    "obj" : {
                        "type": "Object",
                        "comment": "Object with fields start_date, end_date, and/or pay_date"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object attempting the update"
                    }
                },
                "tests": [
                    "Refuses bad form update object (no valid fields)",
                    "Undefined if user does not exist",
                    "Refuses if user does not have read permissions on payroll",
                    "Refuses if user does not have write permissions on payroll",
                    "Updates all fields"
                ]
            },
            "GetPayPeriod": {
                "purpose": "Gets a single pay period",
                "params": {
                    "period" : {
                        "type": "number|PayPeriod",
                        "comment": "The pay period to get the information of"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the pay period"
                    },
                    "populated" : {
                        "type": "boolean",
                        "comment": "Indicates whether or not the Pay Period object is to be filled with all related Payroll objects",
                        "default": false
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Undefined if period does not exist",
                    "Refuses if user does not have read permissions on payroll",
                    "Returns period object",
                    "Returns populated payroll object if populated true"
                ]
            },
            "GetPayroll": {
                "purpose": "Gets a single payroll object",
                "params": {
                    "payroll" : {
                        "type": "number|Payroll",
                        "comment": "The id or Payroll object to retrieve"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the payroll item"
                    },
                    "populated" : {
                        "type": "boolean",
                        "comment": "Whether or not the Payroll object should be filled with its items.",
                        "default": false
                    }
                },
                "tests": [
                    
                ]
            },
            "ListPayPeriod": {
                "purpose": "Gets a list of max 100 of the most recent pay periods",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The quantity of results to get"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the list"
                    },
                    "populated" : {
                        "type": "boolean",
                        "comment": "Whether or not the pay periods should also be filled with populated payroll objects"
                    }
                },
                "tests": [
                    "Caps out at 100",
                    "Undefined if user does not exist",
                    "Refuses if user does not have read permissions on payroll",
                    "Undefined if Pay Period does not exist",
                    "Returns populated list if populated true",
                    "Returns list of pay periods"
                ]
            },
            "ListPayroll": {
                "purpose": "Gets a list of max 100 payroll objects",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The amount to retrieve"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the list of Payroll objects"
                    },
                    "populated" : {
                        "type": "boolean",
                        "comment": "Whether or not the returned list should be populated with items",
                        "default": false
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if the user does not have read permissions on payroll",
                    "Caps out at max 100",
                    "Returns populated list if populated true",
                    "Returns list of payroll objects"
                ]
            },
            "PagePayPeriod": {
                "purpose": "Gets a page of Pay Periods",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The page amount to get"
                    },
                    "page" : {
                        "type": "number",
                        "comment": "The page number to get (starting at 1)"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting a page of Pay Periods"
                    },
                    "populated" : {
                        "type": "boolean",
                        "comment": "Whether or not the returned results should be populated with Payroll objects (that are also populated)",
                        "default": false
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if the user does not have read permission on payroll",
                    "Refuses negative page",
                    "Returns the correct amount",
                    "Skips the proper amount",
                    "Returns populated list of populated true",
                    "Returns normal list if populated false"
                ]
            },
            "PagePayroll": {
                "purpose": "Gets a page of Payroll objects",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The amount in a page of Payroll objects to get"
                    },
                    "page" : {
                        "type": "number",
                        "comment": "The page skip offset (start point 1)"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the page"
                    },
                    "populated" : {
                        "type": "boolean",
                        "comment": "Whether or not the results should be populated with Items as well",
                        "default": false
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if the user does not have read permissions on payroll",
                    "Refuses negative page",
                    "Caps out at 100",
                    "Skips the proper amount",
                    "Returns normal list if populated false",
                    "Returns populated list if populated true"
                ]
            },
            "LockPayroll": {
                "purpose": "Locks a payroll object to a single user",
                "params": {
                    "payroll" : {
                        "type": "number|Payroll",
                        "comment": "The id or Payroll object to lock"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the lock"
                    }
                },
                "tests": [
                    "Undefined if user or payroll objects do not exist",
                    "Refuses if user does not have write permission on payroll",
                    "Refuses if user does not have read permission on payroll",
                    "Refuses if lock already exists on payroll object",
                    "Returns true if user already has lock, or object becomes locked"
                ]
            },
            "ReleasePayroll": {
                "purpose": "Releases the payroll object from lock",
                "params": {
                    "payroll" : {
                        "type": "number|Payroll",
                        "comment": "The id or Payroll object to release"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object releasing the payroll object from lock"
                    }
                },
                "tests": [
                    "Undefined if user or payroll object does not exist",
                    "Refuses if user does not own lock, and does not possess force unlock permission",
                    "Releases lock"                    
                ]
            }
        },
        "dependencies": {
            "{default as User}": "../data/user_account",
            "Payroll": "../data/payroll",
            "PayrollItem": "../data/payroll_item",
            "PayrollTransaction": "../data/payroll_transaction",
            "PayPeriod": "../data/pay_period",
            "Employee": "../data/employee",
            "* as Data": "../data",
            "* as LockController": "./lock"
        }
    },
    "PayrollRouter": {
        "filename": "payroll",
        "folder": "routers",
        "type": "router",
        "post": {
            "/": "Get a payroll object (for an employee)",
            "/create": "Create a payroll object for an employee",
            "/list": "Get a list of payroll objects",
            "/page": "Get a page of payroll objects",
            "/lock": "Lock a payroll for editing",
            "/release": "Release the lock from a payroll",
            "/item": "Get a single payroll item",
            "/item/list": "Get all items on a payroll",
            "/item/add": "Add an item to the payroll",
            "/item/remove": "Remove an item from a payroll",
            "/item/update": "Update an item on a payroll",
            "/period": "Get a pay period",
            "/period/create": "Create a new pay period",
            "/period/list": "Get a list of pay periods",
            "/period/page": "Get a page of pay periods",
            "/period/update": "Update a pay period"
        }
    },
    "ExpenseController": {
        "filename": "expense",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "CreateExpense": {
                "purpose": "Creates a new expense",
                "params": {
                    "name" : {
                        "type": "string",
                        "comment": "Max 64 character long name of the expense"
                    },
                    "description" : {
                        "type": "string",
                        "comment": "Max 300 character long description of expense/bill"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object attempting to add the expense"
                    },
                    "isActive" : {
                        "type": "boolean",
                        "comment": "Whether or not the bill is currently active. Default true.",
                        "default": true
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if user does not have write permission on expenses",
                    "Refuses if user does not have read permission on expenses",
                    "Refuses bad form parameters",
                    "Creates new expense"
                ]
            },
            "CreateBill": {
                "purpose": "Creates a new bill of an expense",
                "params": {
                    "expense" : {
                        "type": "number|Expense",
                        "comment": "The id or Expense object this bill is for"
                    },
                    "amt" : {
                        "type": "number",
                        "comment": "The amount in dollars this bill comes to"
                    },
                    "billing_date" : {
                        "type": "Date",
                        "comment": "The date this bill occurs on. Default now."
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object attempting to create the new bill "
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if user does not have write permission on expense",
                    "Refuses if user does not have read permission on expense",
                    "Undefined if expense does not exist",
                    "Refuses if expense is set to inactive",
                    "Creates new bill"
                ]
            },
            "GetExpense": {
                "purpose": "Gets a single expense",
                "params": {
                    "expense" : {
                        "type": "number|Expense",
                        "comment": "The expense to get"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user requesting the expense"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if user does not have read permission on expense",
                    "Undefined if expense does not exist",
                    "Returns expense"
                ]
            },
            "GetBill": {
                "purpose": "Gets a single bill object",
                "params": {
                    "bill" : {
                        "type": "number|Bill",
                        "comment": "The bill object to lookup and get"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user requesting the bill object"
                    }
                },
                "tests": [
                    "Refuses if user does not user",
                    "Refuses if user does not have read permission on expenses",
                    "Undefined if bill does not exist",
                    "Returns bill obect"
                ]
            },
            "ListExpenses": {
                "purpose": "Gets a list of expenses",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The quantity of expenses to return (Max 100)"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the expenses"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",  
                    "Refuses if user does not have read permission on expense",
                    "Caps out at max 100",
                    "Returns list of expenses"
                ]
            },
            "ListBills": {
                "purpose": "Gets a list of bills, regardless of which expense they belong to",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The amount of bills to return (max 100)"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the bills"
                    },
                    "expense" : {
                        "type": "number|Expense",
                        "comment": "The optional id or Expense the bills are to belong to",
                        "default": -1
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if user does not have read permission on expense",
                    "Caps out at max 100",
                    "Returns a list of bills specific to expense if expense defined",
                    "Returns a list of bills"
                ]
            },
            "PageExpenses": {
                "purpose": "Gets a page of expenses",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The quantity of expenses to return"
                    },
                    "page" : {
                        "type": "number",
                        "comment": "Which page to get (start point 1)"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id of User object requesting the page"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if user does not have read permissions on expenses",
                    "Refuses if page is negative"
                ]
            },
            "PageBills": {
                "purpose": "Gets a page of bills",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The amount to retrieve (page size, max 100)"
                    },
                    "page" : {
                        "type": "number",
                        "comment": "The page to get (starting 1)"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The Id or User requesting the page"
                    },
                    "expense" : {
                        "type": "number|Expense",
                        "comment": "The optional id or Expense object to retrieve a page of bills for",
                        "default": -1
                    }
                },
                "tests": [
                    "Refuses nonexistent users",
                    "Refuses if user does not have read permission",
                    "Refuses if page is less than 1",
                    "Caps out at max 100",
                    "Returns page of bills"
                ]
            },
            "AdjustBill": {
                "purpose": "Updates a bill object by negating the one specified, and adding the new one",
                "params": {
                    "bill" : {
                        "type": "number|Bill",
                        "comment": "The bill to negate"
                    },
                    "obj" : {
                        "type": "Object",
                        "comment": "The update object. Supports fields (date/billing_date, amount, expense_id/expense[object])"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user trying to update the bill"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if user does not have read permission on expense",
                    "Refuses if user does not have write permission on expense",
                    "Refuses bad form update object (no valid fields)",
                    "Negates old bill",
                    "Creates new bill"
                ]
            },
            "UpdateExpense": {
                "purpose": "Updates the information in an expense object",
                "params": {
                    "expense" : {
                        "type": "number|Expense",
                        "comment": "The id or expense object to update"
                    },
                    "obj" : {
                        "type": "Object",
                        "comment": "The update object. Supports name, description, is_active"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The  id or User object updating the expense"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if user does not have read permission on expense",
                    "Refuses if user does not have write permission on expense",
                    "Undefined if expense does not exist",
                    "Refuses bad form update object (no valid fields)",
                    "Updates all fields"
                ]
            },
            "DeactivateExpense": {
                "purpose": "Sets an expense to inactive. Alias for SetExpenseActive=false",
                "params": {
                    "expense" : {
                        "type": "number|Expense",
                        "comment": "The id or Expense object to set to inactive"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object setting the expense to inactive"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if user does not have read permission on expense",
                    "Refuses if user does not have write permission on expense",
                    "Sets expense inactive"
                ]
            },
            "ActivateExpense": {
                "purpose": "Sets an expense to active. Alias for SetExpenseIsActive=true",
                "params": {
                    "expense" : {
                        "type": "number|Expense",
                        "comment": "The id or Expense object to set to active"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object setting the expense to active"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if user does not have read permission on expense",
                    "Refuses if user does not have write permission on expense",
                    "Sets expense active"
                ]
            },
            "SetExpenseIsActive": {
                "purpose": "Sets an expense to active/inactive based on input",
                "params": {
                    "expense" : {
                        "type": "number|Expense",
                        "comment": "The id or Expense object to set the status of"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object setting the expense status"
                    },
                    "status" : {
                        "type": "boolean",
                        "comment": "What to set the activity state to"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if user does not have read permission on expense",
                    "Refuses if user does not have write permission on expense",
                    "Sets the expense is_active to Status"
                ]
            }
        },
        "dependencies": {
            "Bill": "../data/bill",
            "Expense": "../data/expense",
            "{default as User}": "../data/user_account",
            "* as Data": "../data"
        }
    },
    "ExpenseRouter": {
        "filename": "expense",
        "folder": "routers",
        "type": "router",
        "post": {
            "/": "Get an expense",
            "/create": "Create a new expense",
            "/list": "Get a list of expenses",
            "/page": "Get a page of expenses",
            "/update": "Update an expense",
            "/activate": "Activate an expense",
            "/deactivate": "Deactivate an expense",
            "/bill": "Get a single bill",
            "/bill/create": "Create a new bill",
            "/bill/page": "Get a page of bills",
            "/bill/list": "Get a list of bills",
            "/bill/update": "Update a bill object",
            "/bill/adjust": "Adjust a bill object"
        }
    },
    "iJournalEntryMoveBatch": {
        "filename": "journal-entry-move-batch",
        "folder": "interfaces",
        "type": "interface",
        "fields": {
            "entry" : {
                "type": "number|Entry",
                "comment": "The id or Journal Entry object"
            },
            "destination" : {
                "type": "number|Journal",
                "comment": "The id or Journal object to move to"
            }
        },
        "dependencies": {
            "{default as Entry}": "../data/journal_entry",
            "Journal": "../data/journal"
        }
    },
    "JournalController": {
        "filename": "journal",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "CreateJournal": {
                "purpose": "Creates a new journal object",
                "params": {
                    "name" : {
                        "type": "string",
                        "comment": "A max 120 character long name of the journal"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the creation of this journal"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if user is not an employee",
                    "Creates new journal"
                ]
            },
            "GetJournal": {
                "purpose": "Gets a single journal",
                "params": {
                    "journal" : {
                        "type": "number|Journal",
                        "comment": "The id or Journal object being requested"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the journal"
                    },
                    "populated" : {
                        "type": "boolean",
                        "comment": "Whether or not the Journal object should be filled with its respective entries"
                    }
                },
                "tests": [
                    "Undefined if Journal or User does not exist",
                    "Refuses if journal does not belong to user",
                    "Retrieves basic journal information if populated false",
                    "Retrieves journal with all entries if populated true"
                ]
            },
            "ListJournals": {
                "purpose": "Gets a list of journals. Alias for PageJournals(page=1)",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The quantity of Journals to return"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the journals"
                    },
                    "populated" : {
                        "type": "boolean",
                        "comment": "Whether or not the list of journals should be populated with entries",
                        "default": false
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if user is not an employee",
                    "Returns only journals belonging to the user",
                    "Caps out at max 100",
                    "Returns list of journals",
                    "Returns list of populated journals if populated true"
                ]
            },
            "PageJournals": {
                "purpose": "Gets a page of Journals",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The amount in a page to get"
                    },
                    "page" : {
                        "type": "number",
                        "comment": "The page to get (minimum 1)"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user requesting the journals"
                    },
                    "populated" : {
                        "type": "boolean",
                        "comment": "Whether or not the journal returns should be populated"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if user is not an employee",
                    "Returns only journals belonging to the user",
                    "Returns page of journals",
                    "Caps out at max 100",
                    "Returns populated page of journals if populated true"
                ]
            },
            "UpdateJournal": {
                "purpose": "Sets the name of a journal",
                "params": {
                    "journal" : {
                        "type": "number|Journal",
                        "comment": "The id or Journal object to be updated"
                    },
                    "obj" : {
                        "type": "Object",
                        "comment": "The update object. Supports name."
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the update"
                    }
                },
                "tests": [
                    "Undefined if user or journal does not exist",
                    "Refuses if user is not an employee",
                    "Refuses if Journal does not belong to user", 
                    "Refuses bad form update object (no valid fields)",
                    "Updates all fields"
                ]
            },
            "DeleteJournal": {
                "purpose": "Deletes a journal (and all entries)",
                "params": {
                    "journal" : {
                        "type": "number|Journal",
                        "comment": "The id or Journal object to be deleted"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object deleting the journal booklet"
                    }
                },
                "tests": [
                    "Refuses if Journal does not belong to User",
                    "Refuses if user is not an employee",
                    "Undefined if user or journal does not exist",
                    "Deletes all journal entries",
                    "Deletes journal"
                ]
            },
            "CreateEntry": {
                "purpose": "Creates a journal entry",
                "params": {
                    "journal" : {
                        "type": "number|Journal",
                        "comment": "The id or Journal the entry is being created in"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the creation of the entry"
                    },
                    "message" : {
                        "type": "string",
                        "comment": "A max 5000 character journal entry"
                    },
                    "workday" : {
                        "type": "number|Workday",
                        "comment": "The optional workday to attach this journal to",
                        "default": -1
                    }
                },
                "tests": [
                    "Refuses if Journal does not belong to User",
                    "Refuses if user is not an employee",
                    "Undefined on invalid fields",
                    "Undefined if journal or user does not exist",
                    "Tags workday if workday set",
                    "Creates journal entry"
                ]
            },
            "GetEntry": {
                "purpose": "Gets a single entry",
                "params": {
                    "entry" : {
                        "type": "number|Entry",
                        "comment": "The journal entry to retriev"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting to see the journal"
                    }
                },
                "tests": [
                    "Refuses if entry does not belong to the user",
                    "Refuses if user is not an employee",
                    "Undefined if entry or user does not exist",
                    "Gets entry"
                ]
            },
            "ListEntries": {
                "purpose": "Gets a list of entries. Alias for PageEntries(page = 1)",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "Max 100 number of journal entries"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the list"
                    },
                    "journal" : {
                        "type": "number|Journal",
                        "comment": "Optional id or Journal object the entries are to belong to",
                        "default": -1
                    }
                },
                "tests": [
                    "Undefined if invalid fields",
                    "Undefined if journal or user does not exist",
                    "Refuses if user is not an employee",
                    "Undefined if journal specified, but does not exist",
                    "Returns list of Entries",
                    "Returns list of entries specific to a journal if journal specified"
                ]
            },
            "PageEntries": {
                "purpose": "Gets a page of entries",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The amount in a page to retrieve (max 100)"
                    },
                    "page" : {
                        "type": "number",
                        "comment": "The page number to get (starting point 1)"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the page"
                    },
                    "journal" : {
                        "type": "number|Journal",
                        "comment": "The optional id or Journal object the entries are specific to",
                        "default": -1
                    }
                },
                "tests": [
                    "Undefined on invalid fields",
                    "Undefined if user does not exist",
                    "Undefined if journal specified, but does not exist",
                    "Refuses if user is not an employee",
                    "Caps out at max 100",
                    "Returns page of entries",
                    "Returns page of entries specific to journal if journal specified"
                ]
            },
            "UpdateEntry": {
                "purpose": "Updates an entry",
                "params": {
                    "entry" : {
                        "type": "number|Entry",
                        "comment": "The id or Entry object to update"
                    },
                    "obj" : {
                        "type": "Object",
                        "comment": "The update object. Supports fields message and workday"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object attempting to update entry"
                    }
                },
                "tests": [
                    "Undefined if user or entry does not exist",
                    "Refuses bad form update object (no valid fields)",
                    "Refuses if entry does not belong to user",
                    "Updates all fields"
                ]
            },
            "DeleteEntry": {
                "purpose": "Deletes a single entry",
                "params": {
                    "entry" : {
                        "type": "number|Entry",
                        "comment": "The id or Entry object to delete"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object deleting the journal entry"
                    }
                },
                "tests": [
                    "Undefined if entry or user do not exist",
                    "Refuses if entry does not belong to user",
                    "Refuses if user is not an employee",
                    "Deletes entry"
                ]
            },
            "MoveEntry": {
                "purpose": "Moves a single entry to another journal",
                "params": {
                    "entry" : {
                        "type": "number|Entry",
                        "comment": "The id or Entry object to move"
                    },
                    "destination" : {
                        "type": "number|Journal",
                        "comment": "The id or journal object to move the entry to"
                    },
                    "user" : {
                        "type": "number",
                        "comment": "The id or User object requesting the move"
                    }
                },
                "tests": [
                    "Refuses if destination or entry do not belong to user",
                    "Refuses if user is not an employee",
                    "Undefined if user, entry, or destination are undefined",
                    "Moves entry"
                ]
            },
            "DeleteEntryBatch": {
                "purpose": "Deletes multiple entries",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object deleting the batch"
                    },
                    "... entries" : {
                        "type": "Array<number|Entry>",
                        "comment": "The array of ids or entries to delete"
                    }
                },
                "tests": [
                    "Deletes entries belonging to user",
                    "Refuses all entries that do not belong to the user",
                    "Refuses if user is not an employee",
                    "Returns object {succeeded[], failed[]} format"
                ]
            },
            "MoveEntryBatch": {
                "purpose": "Move multiple entries to different locations",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object moving the journals"
                    },
                    "... batch" : {
                        "type": "Array<iJournalEntryMoveBatch>",
                        "comment": "The array of entry move batches"
                    }
                },
                "tests": [
                    "Refuses entries not belonging to user",
                    "Refuses destinations not belonging to user",
                    "Undefined on nonexistent user",
                    "Refuses non-existent entries and destinations",
                    "Moves entries where destination and entry both belong to user",
                    "Returns object {succeeded[], failed[]} format"
                ]
            }
        },
        "dependencies": {
            "{default as Entry}": "../data/journal_entry",
            "Journal": "../data/journal",
            "{default as User}": "../data/user_account",
            "{iJournalEntryMoveBatch}": "../interfaces/journal-entry-move-batch",
            "{default as Workday}": "../data/employee_workday",
            "* as Data": "../data"
        }
    },
    "JournalRouter": {
        "filename": "journal",
        "folder": "routers",
        "type": "router",
        "post": {
            "/": "Get a single journal",
            "/list": "Get a list of journals",
            "/page": "Get a page of journals",
            "/update": "Update a journal",
            "/delete": "Delete a journal",
            "/entry": "Get a single entry",
            "/entry/list": "Get a list of entries",
            "/entry/page": "Get a page of entries",
            "/entry/update": "Update a single entry",
            "/entry/delete": "Delete a single entry",
            "/entry/move": "Move an entry to another journal"
        }
    },
    "CustomerController": {
        "filename": "customer",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "CreateCustomer": {
                "purpose": "Create a new customer. Required fields name, mailing address, postal code, country, phone number.",
                "params": {
                    "objOrName" : {
                        "type": "Customer|string",
                        "comment": "A customer object or string"
                    },
                    "phone" : {
                        "type": "number",
                        "comment": "The phone number of the company"
                    },
                    "mailingAddress" : {
                        "type": "string",
                        "comment": "The mailing address of the customer"
                    },
                    "mailingPostalCode" : {
                        "type": "string",
                        "comment": "The mailing postal code of the customer"
                    },
                    "mailingCountry" : {
                        "type": "string",
                        "comment": "The country of the mailing address"
                    },
                    "physicalAddress" : {
                        "type": "string",
                        "comment": "The physical address of the company",
                        "default": null
                    },
                    "physicalPostalCode" : {
                        "type": "string",
                        "comment": "The physical address' postal code of the company"
                    },
                    "physicalCountry" : {
                        "type": "string",
                        "comment": "The physical country of the company"
                    },
                    "token" : {
                        "type": "string",
                        "comment": "The token created by an employee to validate registration"
                    }
                },
                "tests": [
                    "Refuses invalid token",
                    "Refuses missing required fields",
                    "Sets start date to now (within 20 minutes +/-)",
                    "Creates new customer"
                ]
            },
            "UpdateCustomer": {
                "purpose": "Updates a customer object",
                "params": {
                    "cust" : {
                        "type": "number|Customer",
                        "comment": "The id or Customer object to update"
                    },
                    "obj" : {
                        "type": "Object",
                        "comment": "The update object. Supports fields company_name/name, mailing_address/mailingAddress, mailing_postal_code/mailingPostalCode, mailing_country/mailingCountry, physical_address/physicalAddress, physical_postal_code/physicalPostalCode, physical_country/physicalCountry, phone/phoneNumber"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user updating the customer"
                    }
                },
                "tests": [
                    "Approves Customer user",
                    "Approves Employee user with permission",
                    "Undefined on invalid cust",
                    "Undefined on invalid user",
                    "Refuses bad form update object (no valid fields)",
                    "Updates all fields"
                ]
            },
            "GetCustomer": {
                "purpose": "Gets a single customer object",
                "params": {
                    "cust" : {
                        "type": "number|Customer",
                        "comment": "The id or Customer object to retrieve"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the customer"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Undefined if cust does not exist",
                    "Refuses if user does not have permission to retrieve Customer object",
                    "Returns customer object"
                ]
            },
            "ListCustomer": {
                "purpose": "Gets a list of customers. Alias for PageCustomer(page = 1)",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The amount of customers to get (max 100)"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object to retrieve"
                    },
                    "populated" : {
                        "type": "boolean",
                        "comment": "Whether or not to also include the contacts in the listing",
                        "default": false
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if user does not have read permission on customers",
                    "Caps out at 100",
                    "Returns list of customer",
                    "Returns list of customer with contacts created if populated true"
                ]
            },
            "PageCustomer": {
                "purpose": "Gets a page of customers",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The amount of customers to get"
                    },
                    "page" : {
                        "type": "number",
                        "comment": "The page number to get (starting point 1)"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the page"
                    },
                    "populated" : {
                        "type": "boolean",
                        "comment": "Whether or not the result should also include contacts"
                    }
                },
                "tests": [
                    "Undefined  if user does not exist",
                    "Refuses if user does not have read permission on customer",
                    "Caps out at 100",
                    "Returns page of customer",
                    "Returns page of customer with contacts created if populated true"
                ]
            },
            "CreateContact": {
                "purpose": "Creates a contact for a customer (does not create user)",
                "params": {
                    "customer" : {
                        "type": "number|User",
                        "comment": "The customer that the contact belongs to"
                    },
                    "firstName" : {
                        "type": "string",
                        "comment": "The first name of the contact"
                    },
                    "lastName" : {
                        "type": "string",
                        "comment": "The last name of the customer"
                    },
                    "phone" : {
                        "type": "string",
                        "comment": "The phone number for this contact"
                    },
                    "ext" : {
                        "type": "number",
                        "comment": "The extension the contact can be reached at (optional)",
                        "default": -1
                    },
                    "about" : {
                        "type": "string",
                        "comment": "An optional description of the customer",
                        "default": ""
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user creating the contact"
                    }
                },
                "tests": [
                    "Refuses missing required fields",
                    "Refuses if user is neither an employee, or the customer",
                    "Refuses if user does not have read permission on customers",
                    "Refuses if user does not have write permission on customers",
                    "Creates new customer contact"
                ]
            },
            "GetContact": {
                "purpose": "Gets a single contact",
                "params": {
                    "contact" : {
                        "type": "number|CustomerContact",
                        "comment": "The id or CustomerContact to request"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user requesting the contact"
                    }
                },
                "tests": [
                    "Refuses if user does not have read permission on contacts (if employee)",
                    "Undefined if user does not exist",
                    "Undefined if contact does not exist",
                    "Refuses if user is not an employee or the customer the contact belongs to",
                    "Gets contact"
                ]
            },
            "ListContacts": {
                "purpose": "Gets a list of contacts. Alias for PageContacts (page = 1)",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The amount of contacts to retrieve"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the listing"
                    },
                    "customer" : {
                        "type": "number|Customer",
                        "comment": "The id or Customer object to get the list of contacts for",
                        "default": -1
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if user does not have read permission on customer",
                    "Approves if user is the customer defined in customer",
                    "Caps out at max 100",
                    "Undefined if customer specified, and customer has no contacts",
                    "Returns list of contacts",
                    "Returns list of contacts belonging to customer if customer specified"
                ]
            },
            "PageContacts": {
                "purpose": "Retrieves a page of customer contacts",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The amount of customer contacts to retrieve"
                    },
                    "page" : {
                        "type": "number",
                        "comment": "The page number of contacts to retrieve (starting point 1)"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the page of contacts"
                    },
                    "customer" : {
                        "type": "number|Customer",
                        "comment": "The id or Customer object the contacts are to belong to",
                        "default": -1
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if user does not have read permission on customer",
                    "Approves if user is the customer defined in customer",
                    "Caps out at max 100",
                    "Undefined if customer specified, and customer has no contacts",
                    "Returns list of contacts",
                    "Returns list of contacts belonging to customer if customer specified"
                ]
            },
            "UpdateContact": {
                "purpose": "Updates a single contact",
                "params": {
                    "contact" : {
                        "type": "number|CustomerContact",
                        "comment": "The id or CustomerContact to update"
                    },
                    "obj" : {
                        "type": "Object",
                        "comment": "The update object. Supports fields first_name/firstName, last_name/lastName, phone/phone_number/phoneNumber, ext/extension"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object attempting to update the contact"
                    }
                },
                "tests": [
                    "Undefined if user or contact does not exist",
                    "Refuses bad form update object (no valid fields)",
                    "Refuses if user is not the customer, or an employee with read and write permissions",
                    "Updates all fields"
                ]
            },
            "DeleteContact": {
                "purpose": "Sets a contact to deleted",
                "params": {
                    "contact" : {
                        "type": "number|CustomerContact",
                        "comment": "The id or CustomerContact object to be set to deleted"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object deleting the customer contact"
                    }
                },
                "tests": [
                    "Undefined if contact or user do not exist",
                    "Refuses if user is not the customer that the contact belongs to, or an employee with read/write permissions on customers",
                    "Sets contact to deleted"
                ]
            }
        },
        "dependencies": {
            "CustomerContact": "../data/customer_contact",
            "{default as User}": "../data/user_account",
            "Customer": "../data/customer",
            "* as Data": "../data"
        }
    },
    "CustomerRouter": {
        "filename": "customer",
        "folder": "routers",
        "type": "router",
        "post": {
            "/": "Get a customer",
            "/create": "Create a new customer",
            "/update": "Update a customer",
            "/list": "Get a list of customers",
            "/page": "Get a page of customers",
            "/contact": "Get a customer contact",
            "/contact/create": "Create a new customer contact",
            "/contact/page": "Get a page of customer contacts",
            "/contact/list": "Get a list of customer contacts",
            "/contact/update": "Update a customer contact",
            "/contact/delete": "Delete a customer contact"
        }
    },
    "AssetController": {
        "filename": "asset",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "CreateAsset": {
                "purpose": "Creates a new asset",
                "params": {
                    "name" : {
                        "type": "string",
                        "comment": "The name of the asset to be added"
                    },
                    "description" : {
                        "type": "string",
                        "comment": "The description of the asset"
                    },
                    "purchaseValue" : {
                        "type": "number",
                        "comment": "Represents how much the asset was purchased for"
                    },
                    "serial" : {
                        "type": "string",
                        "comment": "The serial key (optional)"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object creating the asset"
                    }
                },
                "tests": [
                    "Undefined if User does not exist",
                    "Refuse if user does not have write permission on Assets",
                    "Refuse missing required fields",
                    "Creates new asset"
                ]
            },
            "GetAsset": {
                "purpose": "Gets a single asset",
                "params": {
                    "asset" : {
                        "type": "number|Asset",
                        "comment": "The id or Asset to retrieve"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the asset"
                    }
                },
                "tests": [
                    "Undefined if user or asset does not exist",
                    "Refuses if user does not have read permission on Asset",
                    "Returns asset"
                ]
            },
            "ListAsset": {
                "purpose": "Gets a list of assets. Alias for PageAssets(page = 1)",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The amount to retrieve"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the asset listing"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Caps out at 100",
                    "Returns list of assets"
                ]
            },
            "PageAsset": {
                "purpose": "Gets a page of assets",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The amount to retrieve in a page"
                    },
                    "page" : {
                        "type": "number",
                        "comment": "The page number to get (starting point 1)"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the page"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Caps out at 100",
                    "Returns list of assets"
                ]
            },
            "UpdateAsset": {
                "purpose": "Updates an asset object",
                "params": {
                    "asset" : {
                        "type": "number|Asset",
                        "comment": "The id or Asset object to update"
                    },
                    "obj" : {
                        "type": "Object",
                        "comment": "The update object. Supports fields name, desc/description, purchase_value/purchaseValue, serial/serialKey/serial_key"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the update"
                    }
                },
                "tests": [
                    "Undefined if user or asset does not exist",
                    "Refuses bad form update object (no valid fields)",
                    "Refuses if user does not have read permission on asset",
                    "Refuses if user does not have write permission on asset",
                    "Updates all fields"
                ]
            },
            "SetAssetArchived": {
                "purpose": "Sets the archived status of an asset",
                "params": {
                    "asset" : {
                        "type": "number|Asset",
                        "comment": "The id or Asset object to set the archived of"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the archival/removal from archive"
                    },
                    "status" : {
                        "type": "boolean",
                        "comment": "Whether or not the asset is to be archived"
                    }
                },
                "tests": [
                    "Undefined if user or asset does not exist",
                    "Refuses if user does not have read permission on assets",
                    "Refuses if user does not have write permission on assets",
                    "Sets archived to status"
                ]
            },
            "ArchiveAsset": {
                "purpose": "Sets an asset to be archived. Alias for SetAssetArchived (status=true)",
                "params": {
                    "asset" : {
                        "type": "number|Asset",
                        "comment": "The id or Asset object to be archived"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object setting the archival"
                    }
                },
                "tests": [
                    "Undefined if user or asset does not exist",
                    "Refuses if user does not have read permission on assets",
                    "Refuses if user does not have write permission on assets",
                    "Sets archived to true"
                ]
            },
            "UnarchiveAsset": {
                "purpose": "Removes an asset from archived. Alias for SetAssetArchived(status=false)",
                "params": {
                    "asset" : {
                        "type": "number|Asset",
                        "comment": "The id or Asset to remove from archive"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User removing the object from the archive"
                    }
                },
                "tests": [
                    "Undefined if user or asset does not exist",
                    "Refuses if user does not have read permission on assets",
                    "Refuses if user does not have write permission on assets",
                    "Sets archived to false"
                ]
            }
        },
        "dependencies": {
            "Asset": "../data/asset",
            "{default as User}": "../data/user_account",
            "* as Data": "../data"
        }
    },
    "AssetRouter": {
        "filename": "asset",
        "folder": "routers",
        "type": "router",
        "post": {
            "/": "Get a single asset",
            "/create": "Create a new asset",
            "/update": "Update an asset",
            "/archive": "Archive an asset",
            "/unarchive": "Unarchive an asset",
            "/list": "Get a list of assets",
            "/page": "Get a page of assets"
        }
    },
    "BulletController": {
        "filename": "bullet",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "CreateBullet": {
                "purpose": "Creates a new global bullet",
                "params": {
                    "msg" : {
                        "type": "string",
                        "comment": "The message to be posted to the global space"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object attempting to post a new global message"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Undefined if msg is under 5 characters",
                    "Refuses if user is not an employee",
                    "Creates a new bullet"
                ]
            },
            "UpdateBullet": {
                "purpose": "Updates a bullet object",
                "params": {
                    "bullet" : {
                        "type": "number|Bullet",
                        "comment": "The id or Bullet object to update"
                    },
                    "obj" : {
                        "type": "Object",
                        "comment": "The update object. Supports field message/msg"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object attempting to update the bullet"
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Undefined if new message is under 5 characters",
                    "Refuses if user is not an employee",
                    "Refuses if user did not originally create the bullet"
                ]
            },
            "GetBullet": {
                "purpose": "Gets a single bullet object",
                "params": {
                    "bullet" : {
                        "type": "number|Bullet",
                        "comment": "The id or Bullet object to retrieve"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the bullet"
                    },
                    "populated" : {
                        "type": "boolean",
                        "comment": "Whether or not the bullet object should have the comments attached to it as well.",
                        "default": false
                    }
                },
                "tests": [
                    "Undefined if bullet or user does not exist",
                    "Refuses if user is not an employee",
                    "Returns bullet object",
                    "Returns bullet object with comments if populated true"
                ]
            },
            "ListBullets": {
                "purpose": "Gets a list of bullets. Alias for PageBullets(page=1)",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The amount of bullets to get. Max 100"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the listing"
                    },
                    "populated" : {
                        "type": "boolean",
                        "comment": "Whether or not the listing should also have comments populated in each object.",
                        "default": false
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if user is not an employee",
                    "Caps out at 100",
                    "Returns a list of bullets",
                    "Returns a list of populated bullets if populated true"
                ]
            },
            "PageBullets": {
                "purpose": "Gets a page of bullets",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The amount of bullets to get (max 100)"
                    },
                    "page" : {
                        "type": "number",
                        "comment": "The page to get (starting point 1)"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the page"
                    },
                    "populated" : {
                        "type": "boolean",
                        "comment": "Whether or not the bullets should come with comments filled in the object",
                        "default": false
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Refuses if user is not an employee",
                    "Caps out at 100",
                    "Returns a page of bullets",
                    "Returns a page of populated bullets if populated true"            
                ]
            },
            "DeleteBullet": {
                "purpose": "Deletes a bullet",
                "params": {
                    "bullet" : {
                        "type": "number|Bullet",
                        "comment": "The id or Bullet object being deleted"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object deleting the bullet"
                    }
                },
                "tests": [
                    "Undefined if user or bullet does not exist",
                    "Refuses if user does did not create the bullet",
                    "Refuses if user is not an employee",
                    "Deletes the bullet (DB deletes comments automatically)"
                ]
            },
            "CreateComment": {
                "purpose": "Creates a new comment on a bullet",
                "params": {
                    "message" : {
                        "type": "string",
                        "comment": "The message to be posted"
                    },
                    "bullet" : {
                        "type": "number|Bullet",
                        "comment": "The id or Bullet being commented on"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object posting the comment"
                    }
                },
                "tests": [
                    "Undefined if user or bullet does not exist",
                    "Refuses if user is not an employee",
                    "Posts a new comment"
                ]
            },
            "UpdateComment": {
                "purpose": "Updates a single comment message",
                "params": {
                    "msg" : {
                        "type": "string",
                        "comment": "The new message contents"
                    },
                    "comment" : {
                        "type": "number|BulletComment",
                        "comment": "The id or comment being updated"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object updating the comment"
                    }
                },
                "tests": [
                    "Undefined if comment or user does not exist",
                    "Refuses if user did not originally post comment",
                    "Updates the comment"
                ]
            },
            "ListComments": {
                "purpose": "Gets a list of comments",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The quantity of comments to retrieve"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the comments"
                    },
                    "bullet" : {
                        "type": "number|Bullet",
                        "comment": "The optional bullet to get the comments on",
                        "default": -1
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Undefined if bullet is specified, and bullet does not exist",
                    "Refuses if user is not an employee",
                    "Returns a list of comments",
                    "Caps out at 100"
                ]
            },
            "PageComments": {
                "purpose": "Gets a page of contents, optionally on a bullet",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The quantity of comments in a page to retrieve"
                    },
                    "page" : {
                        "type": "number",
                        "comment": "The page number to get (starting point 1)"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the comments"
                    },
                    "bullet" : {
                        "type": "number|Bullet",
                        "comment": "The optional bullet to get the comments on",
                        "default": -1
                    }
                },
                "tests": [
                    "Undefined if user does not exist",
                    "Undefined if bullet is specified, and bullet does not exist",
                    "Refuses if user is not an employee",
                    "Returns a page of comments",
                    "Caps out at 100"
                ]
            },
            "ListCommentsByUser": {
                "purpose": "Gets comments posted by a user. Alias for PageCommentsByUser(page = 1)",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The amount of comments to get"
                    },
                    "target" : {
                        "type": "number|User",
                        "comment": "The user to get the posts of"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user requesting the listk"
                    }
                },
                "tests": [
                    "Undefined if target or user does not exist",
                    "Refuses if user is not an employee",
                    "Returns amt of comments",
                    "Caps out at max 100"
                ]
            },
            "PageCommentsByUser": {
                "purpose": "Gets a page of comments posted by a user",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The amount of comments in a page to get"
                    },
                    "page" : {
                        "type": "number",
                        "comment": "The page number to get (starting point 1)"
                    },
                    "target" : {
                        "type": "number|User",
                        "comment": "The id or User object to get the comments of"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User requesting the listing"
                    }
                },
                "tests": [
                    "Undefined if target or user does not exist",
                    "Refuses if user is not an employee",
                    "Gets a page of comments",
                    "Caps out at max 100"
                ]
            },
            "ListBulletsByUser": {
                "purpose": "Gets a list of bullets that a user posted. Alias for PageBulletsByUser(page = 1)",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The amount of bullets to retrieve"
                    },
                    "target" : {
                        "type": "number|User",
                        "comment": "The target id or user object to get the bullets of"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the bullets"
                    }
                },
                "tests": [
                    "Undefined if target or user does not exist",
                    "Refuses if user is not an employee",
                    "Returns list of bullets",
                    "Caps out at 100"
                ]
            },
            "PageBulletsByUser": {
                "purpose": "Gets a page of bullets from a user",
                "params": {
                    "amt" : {
                        "type": "number",
                        "comment": "The amount of bullets in a page to retrieve"
                    },
                    "page" : {
                        "type": "number",
                        "comment": "The page of bullets to get. Starting point 1"
                    },
                    "target" : {
                        "type": "number|User",
                        "comment": "The id or User object to get the bullets of"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object requesting the page"
                    }
                },
                "tests": [
                    "Undefined if target or user does not exist",
                    "Refuses if user is not an employee",
                    "Returns page of bullets",
                    "Caps out at 100"
                ]
            }
        },
        "dependencies": {
            "Bullet": "../data/bullet",
            "BulletComment": "../data/bullet_comment",
            "{default as User}": "../data/user_account",
            "* as Data": "../data"
        },
        "todo": [
            "Implement liking systems"
        ]
    },
    "BulletRouter": {
        "filename": "bullet",
        "folder": "routers",
        "type": "router",
        "post": {
            "/": "Get a single bullet",
            "/create": "Create a new bullet",
            "/update": "Update a single bullet",
            "/list": "Get a list of bullets",
            "/page": "Get a page of bullets",
            "/page/user": "Get a page of bullets by a user",
            "/list/user": "Get a list of bullets from a user",
            "/delete": "Delete a bullet",
            "/comment": "Get a single comment on a bullet",
            "/comment/create": "Create a new comment on a bullet",
            "/comment/update": "Update a comment on a bullet",
            "/comment/list": "Get a list of comments on a bullet",
            "/comment/page": "Get a page of comments on a bullet",
            "/comment/page/user": "Get a page of comments by a user",
            "/comment/list/user": "Get a page of comments by a user"
        }
    },
    "Locker": {
        "filename": "lock",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "LockObject": {
                "purpose": "Activates a lock on an object",
                "params": {
                    "target" : {
                        "type": "Object",
                        "comment": "The object to lock. Requires tablename."
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object locking the target"
                    }
                },
                "tests": [
                    "undefined if user or target does not exist",
                    "Refuses if target does not have a tablename attribute",
                    "Undefined if obj does not have an id",
                    "Undefined if target tablename does not exist",
                    "Refuses if there is already a lock on the object",
                    "Locks object"
                ]
            },
            "UnlockObject": {
                "purpose": "Removes a lock from an object",
                "params": {
                    "target" : {
                        "type": "Object",
                        "comment": "The object to unlock. Requires tablename"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object unlocking"
                    }
                },
                "tests": [
                    "Undefined if user or target does not exist",
                    "Undefined if obj does not have an id",
                    "Undefined if lock is not active",
                    "Refuses if user does not have force permission for locking or is not the locker",
                    "Undefined if target tablename does not exist",
                    "Unlocks target"
                ]
            },
            "IsLocked": {
                "purpose": "Checks whether or not there is an active lock on an object",
                "params": {
                    "obj" : {
                        "type": "Object",
                        "comment": "The object to check"
                    }
                },
                "tests": [
                    "Undefined if obj does not exist",
                    "Undefined if obj does not have a tablename",
                    "Undefined if obj does not have an id",
                    "Returns whether or not there is a lock"
                ]
            },
            "ForceUnlock": {
                "purpose": "Forces the unlock of an object",
                "params": {
                    "target" : {
                        "type": "Object",
                        "comment": "The object to force the removal of the lock on"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object forcing the lock removal"
                    }
                },
                "tests": [
                    "Undefined if User or target do not exist",
                    "Undefined if target lacks tablename or id",
                    "Undefined if there is no lock",
                    "Refuses if user does not have force permission on lock",
                    "Forcefully removes lock"
                ]
            },
            "GetUserLocked": {
                "purpose": "Gets the person who has the lock",
                "params": {
                    "target" : {
                        "type": "Object",
                        "comment": "The target to check the lock for"
                    }
                },
                "tests": [
                    "Undefined if target does not exist",
                    "Undefined if target does not have tablename or id",
                    "Undefined if target tablename does not exist",
                    "Returns id of user that holds the lock"
                ]
            }
        },
        "dependencies": {
            "{default as User}": "../data/user_account",
            "* as Data": "../data"
        }
    }
}