{
    "PrimaryRouter": {
        "filename": "router",
        "folder": "",
        "type": "router",
        "post": {
            "/:Type/:Function": "Routing made easy. All params are received by JSON.",
            "/:Type/List/:Amount": "List amount",
            "/:Type/Page/:Amount/:Page": "Pages number Page, amount Amount",
            "/:Type/Tag/:Function": "Perform function on Tag. Tag must be supported.",
            "/:Type/Page/Tagged/:Amount/:Page": "Pages tagged Type, Quantity Amount, page number Page",
            "/:Type/Tag/Page/:Amount/:Page": "Perform function on Tagged Type. Tag must be supported.",
            "/:Type/Tag/List/:Amount": "Perform function on Tag. Tag must be supported.",
            "/:Type/:Function/Tag": "Perform function on Tagged Type. Tag must be supported."
        }
    },
    "PaymentController": {
        "filename": "payment-controller",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "ReceivePayment": {
                "purpose": "Process payments by taking the id of a token, verifying it is a valid token, then processing a payment of amount amt.",
                "params": {
                    "tokenId" : {
                    "type": "string",
                    "comment": "The stripe token"
                    },
                    "amt" : {
                    "type": "number",
                    "comment": "The amount of the payment"
                    },
                    "description" : {
                    "type": "string",
                    "comment": "The reason or description for/of the payment"
                    },
                    "save": {
                        "type": "boolean",
                        "default": false,
                        "comment": "Whether or not the card details should be saved through Stripe for future re-use."
                    }
                },
                "tests": [
                    "Errors on invalid id",
                    "Adds transaction to database",
                    "Charges correct amount",
                    "Creates charge with Stripe"
                ]
            },
            "ValidateToken": {
                "purpose": "Easier validation of tokens to make testing easier.",
                "params": {
                    "tokenId" : {
                    "type": "number",
                    "comment": "The stripe token id"
                    }
                },
                "tests": [
                    "Rejects bad form before sending to server (local)",
                    "Rejects good form, invalid tokens (async)",
                    "Approves valid tokens"
                ]
            },
            "Refund": {
                "purpose": "Refund a payment to a customer",
                "params": {
                    "transaction" : {
                    "type": "any",
                    "comment": "A charge object"
                    },
                    "amount" : {
                    "type": "number",
                    "comment": "Amount to refund. -1 means full amount",
                    "default": "-1"
                    }
                },
                "tests": [
                    "Refunds correct amount",
                    "Ignores bad form for transaction id (local)",
                    "Breaks on non-existent transaction id"
                ]
            },
            "Adjust": {
                "purpose": "Adjust a previously made payment (refund, and makepayment, or just a refund if is less)",
                "params": {
                    "transaction" : {
                    "type": "any",
                    "comment": "Positive or negative decimal"
                    },
                    "amount" : {
                    "type": "number",
                    "comment": "Positive or negative decimal"
                    }
                },
                "tests": [
                    "refunds correct partial amount",
                    "re-charges correct amount",
                    "refunds full amount on new charge higher"
                ]                
            },
            "CheckForEvents": {
                "purpose": "Check for new events from Stripe",
                "params": {

                },
                "tests": [
                    "Returns events when there are unread events",
                    "Returns nothing when there are no events to be read"
                ]
            },
            "GetBalance": {
                "purpose": "Returns the balance that stripe owes us thus far",
                "params" :{
                    
                },
                "tests": [
                    "Retrieves proper balance"
                ]
            },
            "TagTransaction": {
                "purpose": "Tags a transaction for easier lookup",
                "params": {
                    "transaction" : {
                        "type": "number|Transaction",
                        "comment": "The id or Transaction object to add the tag to"
                    },
                    "tagName" : {
                        "type": "",
                        "comment": ""
                    },
                },
                "tests": [
                    
                ]
            },
        },
        "dependencies": {
            "* as _": "lodash",
            "* as StripeNode": "stripe"
        }
    },
    "UserController": {
        "filename": "user-controller",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "RegisterUserAccount": {
              "purpose": "Register a new user for the system",
              "params": {
                  "username" : {
                     "type": "string",
                     "comment": "The username that they will be signing up with"
                  },
                  "password" : {
                     "type": "string",
                     "comment": "The password they will be using"
                  }
              },
              "tests": [
                  "Creates a new user",
                  "Hashes the password",
                  "Takes at least 400ms to generate",
                  "Sends iterations and password to hasher",
                  "Sets the user account as inactive"
              ]
            },
            "FinishUserRegistration": {
                "purpose": "Verifies a token for registration, and sets a user to active",
                "params": {
                    "user" : {
                        "type": "number|string",
                        "comment": "The user id or user name that is to be registered"
                    },
                    "token" : {
                        "type": "string",
                        "comment": "The token string for the user registration"
                    }
                },
                "tests": [
                    "Activates user account"
                ]
            },
            "ValidateActivationToken": {
              "purpose": "Validation of the activation token",
              "params": {
                  "userid" : {
                     "type": "number",
                     "comment": "The user id that is to be verified with a token"
                  },
                  "token" : {
                     "type": "string",
                     "comment": "The token to be verified"
                  }
              },
              "tests": [
                  "Validates correctly",
                  "Rejects invalid parameters",
                  "Rejects incorrect token"
              ]
            },
            "ActivateUser": {
                "purpose": "Activates a user that has been deactivated",
                "params": {
                    "userId" : {
                        "type": "number",
                        "comment": "The user Id that is to be activated"
                    }
                },
                "tests": [
                    "Properly activates a user",
                    "Refuses a non-existent user id",
                    "Ignores users that are already active"
                ]
            },
            "DeactivateUser": {
                "purpose": "Deactivates a user that is currently active",
                "params": {
                    "userId" : {
                        "type": "number",
                        "comment": "The user Id to be deactivated"
                    }
                },
                "tests": [
                    "Deactivates user",
                    "Ignores users that are already inactive",
                    "Refuses a non-existent user id"
                ]
            },
            "GetUserStatus": {
                "purpose": "Retrieves whether or not a user is active",
                "params": {
                    
                },
                "tests": [
                    "gets proper status",
                    "ignores non-existent users"
                ]
            },
            "CreateUser": {
                "purpose": "Creates a new user. Utility function for user registration. Returns id",
                "params": {
                    "userName" : {
                        "type": "string",
                        "comment": "The username to be used for logins. No spaces permitted."
                    },
                    "password" : {
                        "type": "string",
                        "comment": "Password in plaintext form, pre-hash."
                    }
                },
                "tests": [
                    "Refuses bad-form username",
                    "Refuses passwords smaller than 8 characters", 
                    "Uses hash algorithm"
                ]
            },
            "ResetPassword": {
                "purpose": "Uses a token to reset the user's password",
                "params": {
                    "newPassword" : {
                        "type": "string",
                        "comment": "The new password"
                    },
                    "resetToken" : {
                        "type": "string",
                        "comment": "The token to be used for resetting the user's password"
                    }
                },
                "tests": [
                    "Password is reset"
                ]
            },
            "GeneratePassword": {
                "purpose": "Dependency injection capable hasher",
                "params": {
                    "password" : {
                        "type": "string",
                        "comment": "The password to be used by the algo"
                    },
                    "algo" : {
                        "type": "(password: string|Buffer, salt: string|Buffer, iterations: number, keylen: number, digest: string, callback: (err: Error, derivedKey: Buffer) => any) => any",
                        "comment": "The hashing algorithm to be used"
                    }
                },
                "tests": [
                    "Generates a hex password hash"
                ]
            },
            "CacheUsers": {
                "purpose": "Caches all of the users locally so lookups in the database are not so arduous. To be done ONCE on application startup.",
                "params": {
                    
                },
                "tests": [
                    "Gets all users",
                    "Gets all password hashes",
                    "Categorizes users into Employees and Customers (if !employee then customer)"
                ]
            },
            "AddUserToCache": {
                "purpose": "Adds a new user to the cache",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or the User object to store"
                    }
                },
                "tests": [
                    "Refuses a non-existent user id",
                    "Caches user"
                ]
            },
            "RemoveUserFromCache": {
                "purpose": "Removes a deactivated user from the cache",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user to remove from the cache"
                    }
                },
                "tests": [
                    "Removes user from cache",
                    "Refuses if user does not exist in cache already"
                ]
            },
            "GetCachedUser": {
                "purpose": "Gets a cached user",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The user or id of the user to get"
                    }
                },
                "tests": [
                    "Retrieves users that do exist",
                    "Refuses if user does not exist"
                ]
            },
            "UpdateCachedUser": {
                "purpose": "Updates a user that was already cached.",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user to be updated from the database"
                    }
                },
                "tests": [
                    "Updates from database",
                    "Refuses if user does not exist in cache",
                    "Errors if user does not exist in database"
                ]
            }
        },
        "dependencies": {
             "* as crypto": "crypto",
             "{default as User}": "../data/user_account"
        }
    },
    "PermissionController": {
        "filename": "permission-controller",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "GivePermission": {
                "purpose": "Give a user a permission, checking first if the user giving the permission is allowed.",
                "params": {
                    "userId" : {
                        "type": "number|User",
                        "comment": "The userId or User object to have the permission set on"
                    },
                    "permissionId" : {
                        "type": "number|Permission",
                        "comment": "The id, or object, of the permission to be set on the user"
                    },
                    "giverId" : {
                        "type": "number|User",
                        "comment": "The userId or User object providing the permission"
                    }
                },
                "tests": [
                    "Refuses if giver does not have permission to provide permission",
                    "Refuses if giver does not exist",
                    "Refuses if user does not exist",
                    "Refuses if permission does not exist",
                    "Sets permission properly"
                ]
            },
            "RevokePermission": {
                "purpose": "Revokes a permisison off of a user, checking first if the revoker is allowed to revoke permission",
                "params": {
                    "revokeee" : {
                        "type": "number|User",
                        "comment": "The id or user object to have the permission revoked from"
                    },
                    "permission" : {
                        "type": "number|Permission",
                        "comment": "The id or object of the permission to be provided"
                    },
                    "revoker" : {
                        "type": "number|User",
                        "comment": "The id or the object of the user revoking the permission"
                    }
                },
                "tests": [
                    "Refuses if giver does not have permission to revoke permission",
                    "Refuses if revoker does not exist",
                    "Refuses if revokeee does not exist",
                    "Refuses if permission does not exist",
                    "Properly revokes permission",
                    "Updates permission cache"
                ]
            },
            "HasPermission": {
                "purpose": "Checks if the user has a permission",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "User id or the user object to be checked"
                    },
                    "permission" : {
                        "type": "number|Permission",
                        "comment": "The permission to be checked"
                    }
                },
                "tests": [
                    "Refuses if user does not exist",
                    "Refuses if permission does not exist",
                    "Returns proper true/false",
                    "Updates permission cache"
                ]
            },
            "CachePermissionSet": {
                "purpose": "To cache a user's permission set. Used to increase permission checking performance.",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The user or id of the user to have their permissions cached"
                    }
                },
                "tests": [
                    "Refuses if user does not exist",
                    "Caches all permissions"
                ]
            },
            "DeleteFromCache": {
                "purpose": "Deletes a user's permissions from cache after a period of time",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object to remove the permissions from"
                    }
                },
                "tests": [
                    "Refuses if user does not exist",
                    "Deletes permissions"
                ]
            }
        },
        "dependencies": {
            "{default as User}": "../data/user_account",
            "{default as Permission}": "../data/user_permission",
            "{default as PermissionSet}": "../data/user_permission_set"
        }
    },
    "CommunicationController": {
        "filename": "communication-controller",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "SendMessage": {
                "purpose": "To send a message to another user. Note: Receipts in conversation should be created too.",
                "params": {
                    "sender" : {
                        "type": "number|User",
                        "comment": "The person that is sending the message"
                    },
                    "conversation" : {
                        "type": "number|Conversation",
                        "comment": "the id or conversation object to send the message to"
                    },
                    "msg" : {
                        "type": "string",
                        "comment": "The message the user has sent"
                    }
                },
                "tests": [
                    "Refuses if user does not exist",
                    "Refuses if conversation does not exist",
                    "Refuses if message is too long",
                    "Refuses if user is not part of the conversation",
                    "Refuses if the message is empty",
                    "Makes necessary notifications",
                    "Sends the message"
                ]
            },
            "CreateReceiptsForMessage": {
                "purpose": "Creates the receipts in a conversation for the messages",
                "params": {
                    "message" : {
                        "type": "id|Message",
                        "comment": "The id or the message object to create receipts for"
                    },
                    "conversation" : {
                        "type": "number|Conversation",
                        "comment": "The id or the Conversation object to create receipts for"
                    }
                },
                "tests": [
                    "Refuses if receipts already exist",
                    "Refuses if id is not set", 
                    "Refuses if conversation does not exist",
                    "Creates receipts for all users in conversation"
                ]
            },
            "GetConversation": {
                "purpose": "Retrieves a single conversation",
                "params": {
                    "user" : {
                        "type": "id|User",
                        "comment": "The user requesting the conversation"
                    },
                    "conversation" : {
                        "type": "number|Conversation",
                        "comment": "The object to retrieve the conversation (just use sync)"
                    }
                },
                "tests": [
                    "Refuses if conversation does not exist",
                    "Refuses if user is not part of the conversation",
                    "Retrieves conversation",
                    "Retrieves a page of messages (50) bolted onto the conversation",
                    "Final 4 messages have receipts"                    
                ]
            },
            "ListConversations": {
                "purpose": "Gets a list of conversations related to the user",
                "params": {
                    "userId" : {
                        "type": "number|User",
                        "comment": "The user to get a list of conversations for"
                    },
                    "amt" : {
                        "type": "number",
                        "comment": "The quantity of conversations to get (max 20)",
                        "default": 20
                    }
                },
                "tests": [
                    "Gets list of conversations",
                    "Gets only conversations for the user",
                    "Retrieves a page of messages (50) bolted onto each conversation",
                    "Refuses if user does not exist",
                    "Returns quantity of conversations or less",
                    "Final 4 messages have receipts"                    
                ]
            },
            "PageConversations": {
                "purpose": "Gets a page of conversations related to the user",
                "params": {
                    "userId" : {
                        "type": "number|User",
                        "comment": "The user to get a page of conversations for"
                    },
                    "amt" : {
                        "type": "number",
                        "comment": "The amount of conversations to get"
                    },
                    "page" : {
                        "type": "number",
                        "comment": "The page number",
                        "default": 1
                    }
                },
                "tests": [
                    "Gets list of conversations",
                    "Gets only conversations for the user",
                    "Retrieves a page of messages (50) bolted onto each conversation",
                    "Refuses if user does not exist",
                    "Returns quantity of conversations or less",
                    "Final 4 messages have receipts"
                ]
            },
            "ListMessages": {
                "purpose": "Gets just the messages for a single conversation",
                "params": {
                    "conversation" : {
                        "type": "number|Conversation",
                        "comment": "The id or Conversation"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User to get the messages in a conversation for"
                    }
                },
                "tests": [
                    "Gets list of messages",
                    "Gets only the messages for the user",
                    "Gets only the messages in the conversation",
                    "Sets messages as received for user",
                    "Final 4 messages have receipts",
                    "Refuses if the user is not part of the conversation the message is in"
                ]
            },
            "PageMessages": {
                "purpose": "Gets a page of messages for a single conversation",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user to get a page of messages for"
                    },
                    "amt" : {
                        "type": "number",
                        "comment": "The number of messages to get in the conversation"
                    },
                    "page" : {
                        "type": "number",
                        "comment": "The page number",
                        "default": 1
                    }
                },
                "tests": [
                    "Gets a page of messages",
                    "Correct amount of messages (less than or equal)",
                    "Correct offset of messages (final page, or correct page)",
                    "Refuses if the user is not part of the conversation the message is in",
                    "Final 4 messages have receipts",
                    "Sets messages as received for user"     
                ]
            },
            "GetReceipts": {
                "purpose": "Gets receipts for a message",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The user to get the receipts for"
                    },
                    "message" : {
                        "type": "number|Message",
                        "comment": "The message to get the receipt(s) for"
                    }
                },
                "tests": [
                    "Gets receipts for only the message",
                    "Gets receipt for only the user",
                    "Refuses if the user is not part of the conversation the message is in",
                    "Returns receipts for message"
                ]
            },
            "AddParticipant": {
                "purpose": "Adds a participant to a conversation",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The user being added"
                    },
                    "conversation" : {
                        "type": "number|Conversation",
                        "comment": "The conversation to be added to"
                    },
                    "adder" : {
                        "type": "number|User",
                        "comment": "The person adding the other to the conversation"
                    }
                },
                "tests": [
                    "Ignores users that do not exist",
                    "Ignores if adder is not part of the conversation",
                    "Ignores if the user is already part of the conversation",
                    "Adds user to the conversation"
                ]
            },
            "SetMessageReceived": {
                "purpose": "Sets a single message as read",
                "params": {
                    "message" : {
                        "type": "number|Message",
                        "comment": "The message to be set as read"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user that read it"
                    }
                },
                "tests": [
                    "Refuses if user does not exist",
                    "Refuses if message does not exist",
                    "Refuses if the user is not part of the conversation the message is in",
                    "Sets the message as read"
                ]
            },
            "GetParticipants": {
                "purpose": "Retrieves the participants in the conversation. Returns ConversationParticipant[]",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user to get the conversation for."
                    },
                    "conversation" : {
                        "type": "number|Conversation",
                        "comment": "The conversation to get the participants for"
                    }
                },
                "tests": [
                    "Reject if the conversation or user does not exist",
                    "Reject if user is not in the conversation",
                    "Returns every other participant than user",
                    "Returns array of ConversationParticipants"
                ]
            },
            "SetAllMessagesRead": {
                "purpose": "Sets all of the messages in the conversation as being read",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object to have 'read' the messages"
                    },
                    "conversation" : {
                        "type": "number|Conversation",
                        "comment": "the id or conversation to have the messages set to read"
                    }
                },
                "tests": [
                    "Refuses if conversation does not exist",
                    "Refuses if user does not exist"
                ]
            },
            "GetUnreadConversations": {
                "purpose": "Gets a page of unread conversations",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object to get the read messages for"
                    },
                    "amt" : {
                        "type": "number",
                        "comment": "The amount of unread conversations (with messages) to get",
                        "default": 25
                    },
                    "page" : {
                        "type": "number",
                        "comment": "The page number of conversations to get (rare to use)",
                        "default": 0
                    }
                },
                "tests": [
                    "Correct offset",
                    "Only gets messages for this user",
                    "Gets correct amount (retrieved <= amt)",
                    "ignores non-existent users",
                    "Gets only conversations for the user"
                ]
            }
        },
        "dependencies": {
            "{default as User}": "../data/user_account",
            "Conversation": "../data/conversation",
            "ConversationParticipant": "../data/conversation_participant",
            "Message": "../data/message",
            "MessageReceipt": "../data/message_receipt"
        }
    },
    "NotificationController": {
        "filename": "notification-controller",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "GetNotifications": {
                "purpose": "Gets the notifications for the user",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user to get the notifications for"
                    }
                },
                "tests": [
                    "Gets notifications for user",
                    "Ignores nonexistent users",
                    "Gets notifications only for the user specified"
                ]
            },
            "CreateNotification": {
                "purpose": "Creates a notification for a user (if it can not be derived)",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or the user object to create the notification for"
                    },
                    "origin" : {
                        "type": "string",
                        "comment": "The origin of the notification"
                    },
                    "message" : {
                        "type": "string",
                        "comment": "The message to give to the user"
                    }
                },
                "tests": [
                    "Creates notification",
                    "Refuses a non-existent user id",
                    "Refuses if origin or message is null or empty",
                    "Caches notification"
                ]
            },
            "RemoveNotification": {
                "purpose": "Removes a notification that has been viewed",
                "params": {
                    "notification" : {
                        "type": "number|Notification",
                        "comment": "The notification to remove"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object requesting the removal"
                    }
                },
                "tests": [
                    "Removes notification",
                    "Refuses if the notification does not belong to the user",
                    "Refuses if the user does not exist",
                    "Refuses if the notification does not exist"
                ]
            },
            "CacheNotifications": {
                "purpose": "Caches all notifications for performance sake by pulling all of them from the database, and finding the notifications that need to exist.",
                "params": {
                    
                },
                "tests": [
                    "Caches notifications"
                ]
            },
            "SetRead": {
                "purpose": "Sets a notification (or notification set) as read",
                "params": {
                    "notification" : {
                        "type": "Notification|Notification[]",
                        "comment": ""
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object setting the notification to read"
                    }
                },
                "tests": [
                    "Rejects if the notification does not belong to the user",
                    "Rejects if the notification does not exist"
                ]
            }
        },
        "dependencies": {
            "{default as User}": "../data/user_account",
            "Notification": "../data/notification"
        }
    },
    "AuthorizationController": {
        "filename": "authorization-controller",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "Authorize": {
                "purpose": "Authorizes a user's login. Uses a persistent token with a transient to verify a user's login. Persistent never changes, and is erased to log out, and the transient is to ensure a session is still valid.",
                "params": {
                    "persistentToken" : {
                        "type": "string",
                        "comment": "The token to be verified"
                    },
                    "transientToken" : {
                        "type": "string",
                        "comment": "The transient token to be verified"
                    }
                },
                "tests": [
                    "Generates a new hex transient token on validation",
                    "Authorizes both the persistent and transient tokens",
                    "Rejects request entirely when the transient token does not exist"
                ]
            },
            "Login": {
                "purpose": "Logs a user in by hashing the password and validating a CSRF token",
                "params": {
                    "username" : {
                        "type": "string",
                        "comment": "The user name to log in (escape the HTML chars here)"
                    },
                    "password" : {
                        "type": "string",
                        "comment": "The password to hash and compare"
                    },
                    "token" : {
                        "type": "string",
                        "comment": "The token to prevent cross site request forgery"
                    }
                },
                "tests": [
                    "Refuses missing CSRF token",
                    "Refuses request when the CSRF is invalid",
                    "Rejects missing username or password",
                    "Rejects usernames with invalid characters",
                    "Tosses the persistent and transient session tokens into the response object when successful"
                ]
            },
            "Logout": {
                "purpose": "Logs a user out by removing the session on the server side. It is the client's responsibility to clean up themselves.",
                "params": {
                    "persistentToken" : {
                        "type": "string",
                        "comment": "The token that was being used to verify the user"
                    },
                    "transientToken" : {
                        "type": "string",
                        "comment": "The transient token last sent to the user"
                    }
                },
                "tests": [
                    "Removes transient token from cache",
                    "Removes persistent token from cache",
                    "Rejects if the persistent and transient tokens do not exist"
                ]
            },
            "GenerateToken": {
                "purpose": "Generates a token",
                "params": {
                    
                },
                "tests": [
                    "Generates a random 128 character token (run 100,000 times, and check if there are any repeats)"
                ]
            },
            "CachePersistentToken": {
                "purpose": "Caches a persistent token",
                "params": {
                    "token" : {
                        "type": "string",
                        "comment": "The persistent token to be cached"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object the persistent token belongs to"
                    }
                },
                "tests": [
                    "Ignores invalid users",
                    "Saves token"
                ]
            },
            "CacheTransientToken": {
                "purpose": "Caches a transient token",
                "params": {
                    "token" : {
                        "type": "string",
                        "comment": "The transient token to be cached"
                    },
                    "persistentToken" : {
                        "type": "string",
                        "comment": "The persistent token this transient token belongs to"
                    }
                },
                "tests": [
                    "Refuses if the persistent token does not exist",
                    "Caches the transient token"
                ]
            },
            "CacheCSRFToken": {
                "purpose": "Caches a CSRF token for logins",
                "params": {
                    "token" : {
                        "type": "string",
                        "comment": "The token to be cached"
                    },
                    "ip" : {
                        "type": "string",
                        "comment": "The IP address that requested the CSRF token"
                    }
                },
                "tests": [
                    "Caches the token"
                ]
            },
            "ValidateAuthTokens": {
                "purpose": "Validates a transient and persistent token together",
                "params": {
                    "transient" : {
                        "type": "string",
                        "comment": "The transient token to be validated"
                    },
                    "persistent" : {
                        "type": "string",
                        "comment": "The persisten token to be validated"
                    }
                },
                "tests": [
                    "Rejects if the transient does not match the persistent",
                    "Rejects if any parameters are missing"
                ]
            },
            "ValidateCSRFToken": {
                "purpose": "Validates a CSRF token for logins",
                "params": {
                    "token" : {
                        "type": "string",
                        "comment": "The token string to be validated"
                    },
                    "ip" : {
                        "type": "string",
                        "comment": "The ip that is requesting the validation"
                    }
                },
                "tests": [
                    "Rejects if the IP does not match",
                    "Rejects if the token does not match",
                    "Resolves to true if it worked"
                ]
            }
        },
        "dependencies": {
            "* as crypto": "crypto",
            "{default as User}": "../data/user_account"
        }
    },
    "TaskboardController": {
        "filename": "taskboard-controller",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "CreateTaskboard": {
                "purpose": "Creates a taskboard for an employee",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object the taskboard belongs to"
                    },
                    "name" : {
                        "type": "string",
                        "comment": "The name of the taskboard"
                    }
                },
                "tests": [
                    "Refuses if the user is not an employee",
                    "Creates the taskboard"
                ]
            },
            "DeleteTaskboard": {
                "purpose": "Deletes a taskboard for an employee",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object doing the deleting"
                    },
                    "taskboard" : {
                        "type": "number|Taskboard",
                        "comment": "The id or taskboard object to be deleted"
                    }
                },
                "tests": [
                    "Refuses if user does not own taskboard",
                    "Deletes taskboard",
                    "Removes all participants"
                ]
            },
            "GetPopulatedTaskboard": {
                "purpose": "Gets a complete taskboard, with populated tasks and tasklists. Data will have to be sorted and organized.",
                "params": {
                    "taskboard" : {
                        "type": "number|Taskboard",
                        "comment": "The taskboard to pull the tasks from"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user pulling the taskboard"
                    }
                },
                "tests": [
                    "Refuses if the user does not exist",
                    "Refuses if the user does not have permission to view tasks",
                    "Refuses if the taskboard does not exist",
                    "Organizes the retrieved data",
                    "Returns a populated taskboard"
                ]
            },
            "AddTasklist": {
                "purpose": "Adds a tasklist to a task board",
                "params": {
                    "name" : {
                        "type": "string",
                        "comment": "The name of the tasklist"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user to add the tasklist to"
                    },
                    "taskboard" : {
                        "type": "number|Taskboard",
                        "comment": "the id or taskboard to add the tasklist to"
                    }
                },
                "tests": [
                    "Refuses if the user is not part of the board",
                    "Refuses if the name is too long",
                    "Refuses if the user does not exist",
                    "Creates the tasklist",
                    "Creates the tasklist in the taskboard"
                ]
            },
            "DeleteTasklist": {
                "purpose": "Removes a tasklist from a task board",
                "params": {
                    "tasklist" : {
                        "type": "number|Tasklist",
                        "comment": "The id or Tasklist object to be removed"
                    },
                    "user" : {
                        "type": "number|Tasklist",
                        "comment": "The user removing the tasklist"
                    }
                },
                "tests": [
                    "Refuses if user does not have permission to remove the list",
                    "Refuses if the user is not part of the board",
                    "Refuses if the tasklist does not exist",
                    "Refuses if the user does not exist",
                    "Removes the tasklist"
                ]
            },
            "MoveTaskList": {
                "purpose": "Moves tasklist to another board",
                "params": {
                    "tasklist" : {
                        "type": "number|Tasklist",
                        "comment": "The tasklist to be moved"
                    },
                    "board" : {
                        "type": "number|Taskboard",
                        "comment": "The taskboard to move the tasklist to"
                    }
                },
                "tests": [
                    "Refuses if the user does not have write permissions in either board",
                    "Refuses if the user does not have read permissions from the original board",
                    "Refuses if the user does not exist",
                    "Refuses if the new board does not exist",
                    "Moves the tasklist"
                ]
            },
            "ChangeTasklistName": {
                "purpose": "Changes a tasklist's name",
                "params": {
                    "newname" : {
                        "type": "string",
                        "comment": "The new name for the tasklist"
                    },
                    "tasklist" : {
                        "type": "number|Tasklist",
                        "comment": "The id or tasklist object to rename"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object doing the renaming"
                    }
                },
                "tests": [
                    "Refuses if the tasklist does not exist",
                    "Refuses if the user does not exist",
                    "Refuses if the name is already the new name",
                    "Updates the name"
                ]
            },
            "GetPopulatedTasklist": {
                "purpose": "Gets a task list with all the tasks",
                "params": {
                    "tasklist" : {
                        "type": "number|Tasklist",
                        "comment": "The tasklist to get. Id can not be unset."
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user requesting the tasklist"
                    }
                },
                "tests": [
                    "Refuses if the tasklist does not exist",
                    "Refuses if the user does not exist",
                    "Refuses if the user is not allowed to see the tasklist",
                    "Gets a tasklist with a .tasks populated"
                ]
            },
            "CreateTask": {
                "purpose": "Creates a task inside of a tasklist",
                "params": {
                    "message" : {
                        "type": "string",
                        "comment": "The task to be completed"
                    },
                    "tasklist" : {
                        "type": "number|Tasklist",
                        "comment": "The id or tasklist object to add the task to"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object adding the task"
                    },
                    "completed" : {
                        "type": "boolean",
                        "comment": "Whether or not it should be set to completed",
                        "default": false
                    }
                },
                "tests": [
                    "Refuses if the user does not have permission to add the task",
                    "Refuses if the user does not exist",
                    "Refuses if the tasklist does not exist",
                    "Creates the task"
                ]
            },
            "SetTaskStatus": {
                "purpose": "Sets a single task as status, or all of its children to status",
                "params": {
                    "task" : {
                        "type": "number|Task",
                        "comment": "The id or task object to set as complete"
                    },
                    "isCompleted" : {
                        "type": "boolean",
                        "comment": "The value to give to IsCompleted"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object setting the task to isCompleted"
                    }
                },
                "tests": [
                    "Refuses if the user does not have permission to set the task status",
                    "Refuses if the user does not exist",
                    "Refuses if the task does not exist",
                    "Sets a single task status",
                    "Sets all children task statuses"
                ]
            },
            "GetTasks": {
                "purpose": "Gets the tasks in a single tasklist",
                "params": {
                    "tasklist" : {
                        "type": "number|Tasklist",
                        "comment": "The tasklist to get the tasks from"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user requesting the tasks"
                    }
                },
                "tests": [
                    "Refuses if the user does not exist",
                    "Refuses if the user does not have permission to view tasks",
                    "Refuses if the tasklist does not exist",
                    "Refuses if the tasklist passed in is unset",
                    "Returns tasks to only the tasklist",
                    "Performs as advertised"                    
                ]
            },
            "SetTaskText": {
                "purpose": "Sets the text of a single task",
                "params": {
                    "task" : {
                        "type": "number|Task",
                        "comment": "The task to update"
                    },
                    "newText" : {
                        "type": "string",
                        "comment": "The new text for the task"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user setting the text"
                    }
                },
                "tests": [
                    "Refuses if the user does not have read permissions",
                    "Refuses if the user does not have write permissions",
                    "Refuses if the user does not exist",
                    "Refuses if the task does not exist",
                    "Performs as advertised"
                ]
            },
            "DeleteTask": {
                "purpose": "Deletes a single task",
                "params": {
                    "task" : {
                        "type": "number|Task",
                        "comment": "The task to be deleted"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user deleting the task"
                    }
                },
                "tests": [
                    "Refuses if user does not have delete permissions",
                    "Refuses if user does not have read permissions",
                    "Refuses if user does not exist",
                    "Refuses if task does not exist",
                    "Deletes the task"
                ]
            },
            "SetTaskParent": {
                "purpose": "Sets the task parent to another id. Undefined means remove parent.",
                "params": {
                    "task" : {
                        "type": "number|Task",
                        "comment": "The task that is being set"
                    },
                    "parent" : {
                        "type": "number|Task",
                        "comment": "The id or task of the parent"
                    }
                },
                "tests": [
                    "Refuses if the user does not have write permissions",
                    "Refuses if the user does not have read permissions",
                    "Refuses if the user does not exist",
                    "Removes parent if parent is undefined or null",
                    "Sets parent to the new parent if defined"
                ]
            }
        },
        "dependencies": {
            "{default as User}": "../data/user_account",
            "Taskboard": "../data/taskboard",
            "{default as Participant}": "../data/taskboard_participant",
            "Tasklist": "../data/tasklist",
            "{default as Task}": "../data/tasklist_task",
            "PermissionController": "./permission-controller"
        }
    },
    "WorkorderController": {
        "filename": "invoice-controller",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "CreateWorkorder": {
                "purpose": "Creates an invoice for use",
                "params": {
                    "customer" : {
                        "type": "number|Customer",
                        "comment": "The id or customer object for the invoice"
                    },
                    "employee" : {
                        "type": "number|User",
                        "comment": "The id or the user object to look up the employee for"
                    }
                },
                "tests": [
                    "Refuses if the customer does not exist",
                    "Refuses if the employee can not be found using the user id",
                    "Refuses if the user does not exist",
                    "Refuses if the user does not have permission to create workorders",
                    "Creates a workorder",
                    "Returns a workorder object"
                ]
            },
            "RequestWorkorderLock": {
                "purpose": "Requests a lock for read/write on a workorder. The workorder id is the dictionary key",
                "params": {
                    "workorder" : {
                        "type": "number|Workorder",
                        "comment": "The id or workorder object to request the lock for"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object requesting the lock"
                    }
                },
                "tests": [
                    "Refuses if the user does not have read permissions on workorder",
                    "Refuses if the user does not have write permissions on workorder",
                    "Refuses if the workorder does not exist",
                    "Refuses if the user does not exist",
                    "Refuses if the workorder is already locked",
                    "Refuses if the user is not an employee",
                    "Returns true"
                ]
            },
            "IsWorkorderLocked": {
                "purpose": "Checks whether or not the workorder is locked",
                "params": {
                    "workorder" : {
                        "type": "number|Workorder",
                        "comment": "The workorder to check"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": ""
                    }
                },
                "tests": [
                    "Refuses if the user does not exist",
                    "Refuses if the user does not have read permissions on the invoice",
                    "Refuses if the user does not have write permissions on the invoice",
                    "Refuses if the workorder does not exist",
                    "Returns whether or not the invoice is locked"
                ]
            },
            "ReleaseWorkorderLock": {
                "purpose": "Release the lock on a workorder object",
                "params": {
                    "lock" : {
                        "type": "number",
                        "comment": "The workorder id that is locked"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user releasing the workorder lock"
                    }
                },
                "tests": [
                    "Refuses if the user does not have the lock",
                    "Refuses if the user does not exist",
                    "Refuses if the user is not an employee",
                    "Ignores if the workorder is not locked",
                    "Removes the lock from the workorder"
                ]
            },
            "AddToWorkorder": {
                "purpose": "Adds an item to the workorder",
                "params": {
                    "service" : {
                        "type": "number|Service",
                        "comment": "The service to add to the workorder"
                    },
                    "workorder" : {
                        "type": "number|Workorder",
                        "comment": "The workorder to add the service to"
                    },
                    "quantity" : {
                        "type": "number",
                        "comment": "The amount of the service to add to the workorder"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object adding to the invoice"
                    }
                },
                "tests": [
                    "Refuses if the user does not have permission to modify the invoice",
                    "Refuses if the user does not exist",
                    "Refuses if the user is not an employee",
                    "Refuses if the employee can not be found using the user id",
                    "Refuses if the service does not exist",
                    "Refuses if the workorder does not exist",
                    "Adds service to the workorder"
                ]
            },
            "RemoveFromWorkorder": {
                "purpose": "Removes a service from a workorder",
                "params": {
                    "item" : {
                        "type": "number|WorkorderItem",
                        "comment": "The workorder item to remove from the invoice"
                    },
                    "workorder" : {
                        "type": "number|Workorder",
                        "comment": "The workorder to remove the item from"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user trying to remove the item"
                    }
                },
                "tests": [
                    "Refuses if the user does not exist",
                    "Refuses if the workorder does not exist",
                    "Refuses if the workorder item does not exist",
                    "Refuses if the employee can not be found using the user id",
                    "Refuses if the user does not have permission to modify the invoice",
                    "Removes from the workorder"
                ]
            },
            "CloseWorkorder": {
                "purpose": "Closes a workorder that is currently open.",
                "params": {
                    "workorder" : {
                        "type": "number|Workorder",
                        "comment": "The id or Workorder object to be closed"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object attempting to close the workorder"
                    }
                },
                "tests": [
                    "Refuses if the user does not exist",
                    "Refuses if the user does not have permission to modify the invoice",
                    "Refuses if the workorder does not exist",
                    "Refuses if another user has the lock on the invoice",
                    "Automatically releases any locks after closure"
                ]
            },
            "AddWorkorderContact": {
                "purpose": "Adds a contact to a workorder",
                "params": {
                    "contact" : {
                        "type": "number|CustomerContact",
                        "comment": "The id or Contact object to be added to the workorder"
                    },
                    "workorder" : {
                        "type": "number|Workorder",
                        "comment": "The workorder to add the contact to"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user adding the contact"
                    }
                },
                "tests": [
                    "Refuses if the user does not exist",
                    "Refuses if the workorder does not exist",
                    "Refuses if the contact does not exist",
                    "Refuses if the user does not have write permissions on the invoice",
                    "Refuses if the user does not have read permissions on the invoice",
                    "Adds the contact to the workorder"
                ]
            },
            "RemoveWorkorderContact": {
                "purpose": "Removes a contact from a workorder",
                "params": {
                    "contact" : {
                        "type": "number|WorkorderContact",
                        "comment": "The id or contact object to remove from the workorder"
                    },
                    "workorder" : {
                        "type": "number|Workorder",
                        "comment": "The id or workorder object to remove the contact from"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user removing the contact from the board"
                    }
                },
                "tests": [
                    "Refuses if the user does not exist",
                    "Refuses if the workorder does not exist",
                    "Refuses if the contact does not exist",
                    "Refuses if the user does not have write permissions on the invoice",
                    "Refuses if the user does not have read permissions on the invoice",
                    "Removes the contact from the workorder"
                ]
            },
            "AddTransaction": {
                "purpose": "Adds a transaction to a workorder",
                "params": {
                    "transaction" : {
                        "type": "number|Transaction",
                        "comment": "The transaction object"
                    },
                    "workorder" : {
                        "type": "number|Workorder",
                        "comment": "The workorder to add the transaction to"
                    },
                    "contact" : {
                        "type": "number|Contact",
                        "comment": "The contact that authorized the transaction"
                    }
                },
                "tests": [
                    "Refuses if user does not exist",
                    "Refuses if the workorder does not exist",
                    "Refuses if the contact does not exist",
                    "Refuses if the contact is not allowed to make payments",
                    "Refuses if the contact is not a contact of the invoice",
                    "Refuses if the transaction object does not exist with stripe",
                    "Links transaction to the workorder"
                ]
            },
            "ConvertEstimateToWorkorder": {
                "purpose": "Converts an estimate into a workorder",
                "params": {
                    "estimate" : {
                        "type": "number|Estimate",
                        "comment": "The id or Estimate object to convert"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object requesting the conversion"
                    }
                },
                "tests": [
                    "Refuses if the user does not exist",
                    "Refuses if the estimate does not exist",
                    "Refuses if the user does not have permission to create invoices",
                    "Creates a workorder based on the estimate",
                    "New estimate contains all items of estimate",
                    "New estimate contains all contacts of estimate"
                ]
            },
            "GetWorkorder": {
                "purpose": "Gets a populated workorder for use",
                "params": {
                    "workorder" : {
                        "type": "number|Workorder",
                        "comment": "The id or workorder object to get the populated version of"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user requesting the workorder"
                    }
                },
                "tests": [
                    "Refuses if the user does not exist",
                    "Refuses if the workorder does not exist",
                    "Refuses if the user does not have read permissions on the invoice",
                    "Gets a populated version of the workorder"
                ]
            }
        },
        "dependencies": {
            "Workorder": "../data/workorder",
            "WorkorderContact": "../data/workorder_contact",
            "CustomerContact": "../data/customer_contact",
            "WorkorderTransaction": "../data/workorder_transaction",
            "Transaction": "../data/transaction",
            "{default as User}": "../data/user_account",
            "WorkorderItem": "../data/workorder_item"
        }
    },
    "EstimateController": {
        "filename": "estimate-controller",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "CreateEstimate": {
                "purpose": "Creates an estimate. Allows customers to see what things should cost before they commit.",
                "params": {
                    "customer" : {
                        "type": "number|Customer",
                        "comment": "The id or Customer object the estimate is for"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or User object creating the estimate"
                    },
                    "validity_period" : {
                        "type": "number",
                        "default": 14,
                        "comment": "A positive integer "
                    },
                    "items" : {
                        "type": "Service[]",
                        "comment": "An array of service Ids or service objects to add to the estimate. Optional parameter",
                        "default": null
                    }
                },
                "tests": [
                    "Refuses if the user does not exist",
                    "Refuses if the user is not an employee",
                    "Refuses if the validity period is not above 0",
                    "Refuses if the the customer does not exist",
                    "Refuses if the user does not have permission to create estimates",
                    "Ignores the invalid services",
                    "Creates the estimate"
                ]
            },
            "AddItem": {
                "purpose": "Adds an item to the estimate",
                "params": {
                    "service" : {
                        "type": "number|Service",
                        "comment": "The id or Service object to add to the invoice"
                    },
                    "estimate" : {
                        "type": "number|Estimate",
                        "comment": "The id or Estimate object to add to the invoice"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object adding to the invoice"
                    }
                },
                "tests": [
                    "Refuses if the user does not exist",
                    "Refuses if the user is not an employee",
                    "Refuses if the user does not have write permissions on the invoice",
                    "Refuses if the user does not have read permissions on the invoice",
                    "Refuses if the service does not exist",
                    "Refuses if the estimate does not exist",
                    "Adds item to the estimate"
                ]
            },
            "RemoveItem": {
                "purpose": "Removes an item from an estimate",
                "params": {
                    "item" : {
                        "type": "number|EstimateItem",
                        "comment": "The id or EstimateItem object to remove"
                    },
                    "estimate" : {
                        "type": "number|Estimate",
                        "comment": "The id or estimate object to have the item removed"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user object removing the item from the estimate"
                    }
                },
                "tests": [
                    "Refuses if the user does not exist",
                    "Refuses if the estimate does not exist",
                    "Refuses if the item does not exist on the estimate",
                    "Refuses if the user does not have write permissions on the estimate",
                    "Refuses if the user does not have read permissions on the estimate",
                    "Removes the item from the estimate"
                ]
            },
            "SetValidityPeriod": {
                "purpose": "Sets the validity period of the estimate. Must be greater than 0",
                "params": {
                    "period" : {
                        "type": "number",
                        "comment": "How many days the estimate is valid for after opening"
                    },
                    "estimate" : {
                        "type": "number|Estimate",
                        "comment": "The id or estimate object to have the period set"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user setting the estimate period"
                    }
                },
                "tests": [
                    "Refuses if the user does not exist",
                    "Refuses if the estimate does not exist",
                    "Refuses if the user does not have write permissions on the estimate",
                    "Refuses if the user does not have read permissions on the estimate",
                    "Refuses if the validity period is not above 0",
                    "Sets the validity period"
                ]
            },
            "GetEstimate": {
                "purpose": "Gets a populated estimate",
                "params": {
                    "estimate" : {
                        "type": "number|Estimate",
                        "comment": "The id or estimate object to work with"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object requesting the estimate"
                    }
                },
                "tests": [
                    "Refuses if the user does not exist",
                    "Refuses if the estimate does not exist",
                    "Refuses if the user does not have read permissions",
                    "Gets a populated version of the estimate"
                ]
            },
            "AddContact": {
                "purpose": "Adds a contact to the estimate",
                "params": {
                    "contact" : {
                        "type": "number|CustomerContact",
                        "comment": "The id or CustomerContact object to add to the estimate"
                    },
                    "estimate" : {
                        "type": "number|Estimate",
                        "comment": "The id or estimate object to add the contact to"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user adding the contact to the estimate"
                    }
                },
                "tests": [
                    "Refuses if the user does not exist",
                    "Refuses if the contact does not exist",
                    "Refuses if the estimate does not exist",
                    "Refuses if the user does not have read permissions",
                    "Refuses if the user does not have write permissions",
                    "Refuses if the user is not an employee",
                    "Adds the contact to the estimate"
                ]
            },
            "RemoveContact": {
                "purpose": "Removes a contact from the estimate",
                "params": {
                    "contact" : {
                        "type": "number|WorkorderContact",
                        "comment": "The id or WorkorderContact object to remove from the estimate"
                    },
                    "estimate" : {
                        "type": "number|Estimate",
                        "comment": "The id or Estimate object to remove the contact from"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object removing the contact"
                    }
                },
                "tests": [
                    "Refuses if the user does not exist",
                    "Refuses if the user does not have write permissions on the estimate",
                    "Refuses if the user does not have read permissions on the estimate",
                    "Ignores if the contact is not in the estimate",
                    "Refuses if the estimate does not exist",
                    "Removes the contact from the estimate"
                ]
            }
        },
        "dependencies": {
            "Estimate": "../data/estimate",
            "EstimateContact": "../data/estimate_contact",
            "CustomerContact": "../data/customer_contact",
            "EstimateItem": "../data/estimate_item",
            "{default as User}": "../data/UserAccount"
        }
    },
    "EmployeeController": {
        "filename": "employee-controller",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "ClockIn": {
                "purpose": "Clock an employee in",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object of the employee clocking in"
                    }
                },
                "tests": [
                    "Refuses if the user is not an employee",
                    "Refuses if the user does not exist",
                    "Returns message saying they're clocked in if there's an active workday going."
                ]
            },
            "ClockOut": {
                "purpose": "Clock an employee out",
                "params": {
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object of the employee clocking out"
                    }
                },
                "tests": [
                    "Refuses if the user is not an employee",
                    "Refuses if the user does not exist",
                    "Refuses if there is not an active workday going."
                ]
            },
            "AddEmployee": {
                "purpose": "Creates a new employee",
                "params": {
                    "employeeOrFirstName" : {
                        "type": "Employee|string",
                        "comment": "Either an employee object (ignores other params), or a string for the first name"
                    },
                    "middle" : {
                        "type": "string",
                        "comment": "The middle name of the employee"
                    },
                    "last" : {
                        "type": "string",
                        "comment": "The last name of the employee"
                    },
                    "phone" : {
                        "type": "string",
                        "comment": "The phone number of the employee"
                    },
                    "address" : {
                        "type": "string",
                        "comment": "The home address of the employee"
                    },
                    "postal_code" : {
                        "type": "string",
                        "comment": "The postal code of the employee"
                    },
                    "sin" : {
                        "type": "string",
                        "comment": "A 9 character long string for the employee's SIN"
                    },
                    "birthday" : {
                        "type": "Date",
                        "comment": "The birthdate of the employee"
                    },
                    "is_active" : {
                        "type": "boolean",
                        "comment": "Whether or not the employee is to be set as active right now",
                        "default": false
                    },
                    "about" : {
                        "type": "string",
                        "comment": "The about for the employee",
                        "default": null
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The id or user object to be linked"
                    }
                },
                "tests": [
                    "Checks if the first param is employee, and runs with it if it is",
                    "Ignores the other parameters if type of first parameter is employee",
                    "Refuses if any of the required fields are missing",
                    "Refuses if the user does not exist",
                    "Refuses if the user already has an employee linked",
                    "Refuses if the user is inactive",
                    "Creates a new employee"
                ]
            },
            "GetEmployee": {
                "purpose": "Gets a single employee (checks cache first)",
                "params": {
                    "employee" : {
                        "type": "number|Employee",
                        "comment": "The id or Employee object. Fills Employee object and returns, or returns Employee object."
                    }
                },
                "tests": [
                    "Refuses if the user does not exist",
                    "Gets filled employee object"
                ]
            },
            "GetEmployeeFromUser": {
                "purpose": "Gets an employee object",
                "params": {
                    "employee" : {
                        "type": "number|User",
                        "comment": "The User to get the employee from"
                    }
                },
                "tests": [
                    "Returns null if there is no employee",
                    "Returns employee"
                ]
            },
            "FireEmployee": {
                "purpose": "Fires an employee",
                "params": {
                    "employee" : {
                        "type": "number|Employee",
                        "comment": "The employee to set as inactive"
                    },
                    "user" : {
                        "type": "number|User",
                        "comment": "The user firing the employee. Used for permission checking."
                    }
                },
                "tests": [
                    "Refuses if the user does not have permission to fire.",
                    "Refuses if the user does not exist",
                    "Refuses if the employee does not exist",
                    "Refuses if the user is not an employee",
                    "Sets the employee as inactive."
                ]
            },
            "LoadEmployees": {
                "purpose": "Caches all employees into memory for easy lookup. Only active employees.",
                "params": {
                    
                },
                "tests": [
                    "Loads all employees",
                    "Loads only active"
                ]
            },
            "CacheEmployee": {
                "purpose": "Adds an employee to the cache after creating a new employee",
                "params": {
                    "employee" : {
                        "type": "Employee",
                        "comment": "A populated, valid, employee object"
                    }
                },
                "tests": [
                    "Adds employee object to the cache"
                ]
            },
            "UncacheEmployee": {
                "purpose": "Removes an employee that has been fired from the cache",
                "params": {
                    "employee" : {
                        "type": "number|Employee",
                        "comment": "The employee object to remove from the cache"
                    }
                },
                "tests": [
                    "Refuses if the Employee object is invalid",
                    "Refuses if the employee does not exist",
                    "Errors if the employee can not be found",
                    "Removes the employee from the cache"
                ]
            }
        },
        "dependencies": {
            "Employee": "../data/employee",
            "{default as User}": "../data/user_account",
            "{default as Workday}": "../data/employee_workday"
        }
    },
    "ServiceController": {
        "filename": "service-controller",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "CreateService": {
                "purpose": "Creates a new service",
                "params": {
                    "name" : {
                        "type": "string|Service",
                        "comment": "The name of the service, or new service object"
                    },
                },
                "tests": [
                    
                ]
            },
        }
    },
}