{
    "PrimaryRouter": {
        "filename": "router",
        "folder": "",
        "type": "router",
        "post": {
            "/:Type/:Function": "Routing made easy. All params are received by JSON.",
            "/:Type/List/:Amount": "List amount",
            "/:Type/Page/:Amount/:Page": "Pages number Page, amount Amount",
            "/:Type/Tag/:Function": "Perform function on Tag. Tag must be supported.",
            "/:Type/Page/Tagged/:Amount/:Page": "Pages tagged Type, Quantity Amount, page number Page",
            "/:Type/Tag/Page/:Amount/:Page": "Perform function on Tagged Type. Tag must be supported.",
            "/:Type/Tag/List/:Amount": "Perform function on Tag. Tag must be supported.",
            "/:Type/:Function/Tag": "Perform function on Tagged Type. Tag must be supported."
        }
    },
    "PaymentController": {
        "filename": "payment-controller",
        "folder": "controllers",
        "type": "functional",
        "functions": {
            "ReceivePayment": {
                "purpose": "Process payments by taking the id of a token, verifying it is a valid token, then processing a payment of amount amt.",
                "params": {
                    "tokenId": "The stripe token",
                    "amt": "The amount of the payment",
                    "description": "The reason or description for/of the payment",
                    "save": {
                        "default": false,
                        "comment": "Whether or not the card details should be saved through Stripe for future re-use."
                    }
                },
                "tests": [
                    "Errors on invalid id",
                    "Adds transaction to database",
                    "Charges correct amount",
                    "Creates charge with Stripe"
                ]
            },
            "ValidateToken": {
                "purpose": "Easier validation of tokens to make testing easier.",
                "params": {
                    "tokenId": " The stripe token id"
                },
                "tests": [
                    "Rejects bad form before sending to server (local)",
                    "Rejects good form, invalid tokens (async)",
                    "Approves valid tokens"
                ]
            },
            "Refund": {
                "purpose": "Refund a payment to a customer",
                "params": {
                    "transaction": "A transaction object",
                    "amount": {
                        "default": -1,
                        "comment": "Amount to refund. -1 means full amount."
                    }
                },
                "tests": [
                    "Refunds correct amount",
                    "Ignores bad form for transaction id (local)",
                    "Breaks on non-existent transaction id"
                ]
            },
            "Adjust": {
                "purpose": "Adjust a previously made payment (refund, and makepayment, or just a refund if is less)",
                "params": {
                    "transaction": "A transaction object",
                    "amount": "Positive or negative decimal"
                },
                "tests": [
                    "refunds correct partial amount",
                    "re-charges correct amount",
                    "refunds full amount on new charge higher"
                ]                
            },
            "CheckForEvents": {
                "purpose": "Check for new events from Stripe",
                "params": {

                },
                "tests": [
                    "Returns events when there are unread events",
                    "Returns nothing when there are no events to be read"
                ]
            },
            "GetBalance": {
                "purpose": "Returns the balance that stripe owes us thus far",
                "params" :{
                    
                },
                "tests": [
                    "Retrieves proper balance"
                ]
            }
        },
        "dependencies": {
            "_": "lodash"
        }
    },
}